{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Zarhus","text":""},{"location":"#welcome-to-zarhus","title":"Welcome to Zarhus","text":"<p>Zarhus is an  embedded Linux distribution developed by 3mdeb, built on top of the Yocto Project. It simplifies provisioning, integration, and maintenance of embedded platforms placing security at its core with strong emphasis on Root of Trust (RoT) and Chain of Trust (CoT) technologies. Our goal is to ensure embedded applications are deployed in trustworthy way.</p>"},{"location":"#mission","title":"\ud83c\udfaf Mission","text":"<ul> <li>Host vMeetups and hands-on training to empower developers with knowledge of secure boot and embedded systems.</li> <li>Help users navigate the growing complexity of modern boot chains.</li> <li>Simplify hardware security enablement in a reproducible and transparent way.</li> </ul>"},{"location":"#vision","title":"\ud83c\udf05 Vision","text":"<p>We envision a world where:</p> <ul> <li>Systems are secure, trustworthy, and repairable.</li> <li>Tools enhance creativity and collaboration without diminishing human purpose.</li> <li>Communities thrive through technology that respects freedom, simplicity, and digital sovereignty.</li> </ul>"},{"location":"#strategy","title":"\ud83d\udee0\ufe0f Strategy","text":"<p>To achieve this vision, Zarhus:</p> <ul> <li>Extends core firmware components like U-Boot, ARM Trusted Firmware, and the Linux Kernel to build an auditable and reproducible Root and Chain of Trust.</li> <li>Integrates advanced hardware security features: secure storage, secure elements, embedded TPMs (e.g., OP-TEE TPMs), encrypted root filesystems, and more.</li> <li>Builds long-term maintainable tooling to support RoT and CoT.</li> <li>Actively collaborates with like-minded communities, such as Dasharo, OpenXT, Qubes OS, Kicksecure, FreeBSD, OpenWRT, Debian, and Fedora.</li> <li>Follows a demo-driven, iterative development approach, emphasizing real-world applicability and constant feedback.</li> <li>Regularly reports progress through working demos and derivative products.</li> </ul> <p>\ud83d\udc49 Watch the Welcome Presentation from Zarhus Developers Meetup 0x1.</p>"},{"location":"#whats-in-the-name","title":"\ud83e\udde9 What's in the Name?","text":"<p>The name Zarhus is an anagram of the Hungarian word \"husz\u00e1r\" a knight in chess and a nod to the Polish Husaria, renowned heavy cavalry. It symbolizes agility, strength, and strategy qualities we bring to embedded system security.</p>"},{"location":"#join-the-community","title":"\ud83c\udf0d Join the Community","text":"<p>Be part of Zarhus and contribute to a growing ecosystem:</p> <ul> <li>\ud83d\udcac Chat with us: Join the Zarhus Matrix Workspace to discuss Zarhus OS, Dasharo Tools Suite, <code>meta-rte</code>, and more.</li> <li>\ud83d\udcc5 Attend events: Join our quarterly Zarhus Developers Meetup (ZDM) for updates, demos, and discussions around the Zarhus ecosystem.</li> </ul> <p>We are continuously growing and plan to introduce dedicated social events and community spaces\u2014stay tuned!</p>         Subscribe to Zarhus Newsletter"},{"location":"#our-contribution","title":"\ud83d\udc65 Our Contribution","text":"<p>Zarhus is proudly developed by 3mdeb, leveraging years of experience in embedded systems, CI/CD, documentation, and Yocto layer optimization.</p> <p>We\u2019ve contributed 4,300+ lines of code to upstream open-source projects essential to Zarhus:</p> <ul> <li>Yocto Poky</li> <li>systemd</li> <li>meta-openembedded</li> <li>meta-riscv</li> <li>meta-swupdate</li> <li>meta-openwrt</li> <li>meta-security</li> <li>meta-virtualization</li> <li>and more\u2026</li> </ul> <p>We also maintain our own open-source layers and tools, including:</p> <ul> <li>meta-dts</li> <li>meta-rte</li> <li>meta-fdo</li> <li>meta-balena-engine</li> <li>meta-trenchboot</li> <li>meta-pcengines</li> </ul> <p>\ud83d\udccd Check out the Zarhus public roadmap to track our progress and plans.</p>"},{"location":"#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>We welcome contributors of all experience levels! Start with our Newcomer Guide to get up to speed.</p> <p>Whether you're interested in improving documentation, contributing code, or testing new features, there's a place for you in the Zarhus community.</p>"},{"location":"faq/","title":"Frequently asked questions","text":"<p>FAQ Section Notice:</p> <p>\ud83d\udd0d Currently Under Construction</p> <p>We're in the process of compiling and addressing the frequently asked questions based on your valuable comments. Your patience is appreciated as we gather and organize the insights shared by our community. Stay tuned for updates!</p>"},{"location":"newcomers/","title":"Newcomers","text":"<p>If you are new to Zarhus, this section is to help you get started using Zarhus operating system and possibly contributing to making it better.</p>"},{"location":"newcomers/#yocto-project","title":"Yocto Project","text":"<p>If you have no prior experience with Yocto Project, it's highly recommended to visit official documentation for Yocto Project Quick Start or choose one of our Pace Enterpraise Training courses focused on Embedded Linux and Yocto Project development.</p>"},{"location":"newcomers/#zarhus-os","title":"Zarhus OS","text":"<p>After getting familiarized with Yocto Project, you can continue exploration with building and running secure and adaptive Zarhus OS. Checkout Getting started page for guides!</p>"},{"location":"newcomers/#zarhus-contribution","title":"Zarhus Contribution","text":"<p>All code review and all issues related to Zarhus are resolved on GitHub. An account there is necessary to contribute and report issues. All Zarhus repositories can be found here.</p> <p>When you have an account on GitHub go ahead and configure an SSH key. It's also highly recommended to configure a GPG key before contributing anything. Instructions to do that can be found here. With that your account should be ready to contribute to Zarhus.</p>"},{"location":"newcomers/#zarhus-issues","title":"Zarhus Issues","text":"<p>zarhus-issues repository is the central hub for tracking and managing issues related to Zarhus OS. Whether you've discovered a bug, have a feature request, or want to contribute to the discussion, this is the place to be.</p> <p>How to raise an issue:</p> <ol> <li>Explore Existing Issues: Before creating a new issue, take a moment to browse    through existing ones. Your concern or idea might already be in discussion,    and you can add your thoughts or upvote existing suggestions.</li> <li>Creating a New Issue: For bug reports, provide detailed steps to reproduce    the issue, your operating system, and any relevant information. Feature    requests should include a clear description of the desired functionality and    why it would be beneficial.</li> </ol>"},{"location":"development-process/standard-release-process/","title":"Standard Release Process","text":"<p>The following document is a description of the standard release process of Zarhus-related images. Precise steps and differences from the standard process will be described in layer-specific documentation.</p>"},{"location":"development-process/standard-release-process/#process-steps","title":"Process steps","text":"<ol> <li>Make sure that everything that should go into the given release is merged    into <code>develop</code>.</li> <li>Bump <code>DISTRO_VERSION</code> in the <code>conf/distro/&lt;distro-name&gt;.conf</code> file.</li> <li>Fill up the <code>CHANGELOG.md</code> file with latest changes.<ul> <li>Run <code>generate-changelog.sh</code> to generate the change notes for your release.</li> <li>Use the <code>generate-changed-recipes</code> script to print the list of changes in   recipe versions. The script uses build manifests - lists of recipes   contained in the image along with their versions. You must provide your   manifest and the current release's manifest as arguments to the script.   The latter can be found in the latest release's section in the GitHub   release pages. The current manifest can be found under the Yocto working   directory in   <code>build/tmp/deploy/images/{machine-name}/{image-name}.manifest</code>.</li> <li>Paste the script output into your release's section in <code>CHANGELOG.md</code>.   Additionally, you must explain why those changes were made and what they   introduce (unless the commit messages listed by <code>generate-changelog.sh</code>   already explain that).</li> <li>Describe any additional changes.</li> </ul> </li> <li>Commit and push the changelog.</li> <li>Merge the changes from <code>develop</code> into <code>main</code>.</li> <li>Create and push a tag to <code>main</code> that matches the newly bumped version, with    <code>v</code> added at the beginning (e.g. <code>v2.0.1-rc.1</code>).</li> <li>Publish the release on GitHub. The release description should be the same as    the release notes for that version. The following artifacts should be    uploaded: The image (usually as <code>wic.gz</code> and <code>wic.bmap</code>), the manifest and    <code>sha256</code> sum of each of those files. Additionally, if possible, upload the    signatures of files (<code>*.sha256.sig</code>). In case of a <code>release candidate</code>, you    should publish it as a pre-release.</li> </ol>"},{"location":"development-process/standard-release-process/#versioning-scheme","title":"Versioning scheme","text":"<p><code>Zarhus</code>-related layers are versioned using the semantic versioning scheme with the following clarifications and additions:</p> <ul> <li><code>PATCH</code> version is incremented with each released <code>HOTFIX</code></li> <li><code>PATCH</code> version is zeroed with the increment of <code>MINOR</code> or <code>MAJOR</code> versions</li> <li><code>MINOR</code> version is incremented with every <code>FEATURE</code> release (may include more   than one feature) unless <code>MAJOR</code> version is incremented</li> <li><code>MINOR</code> version is zeroed with the increment of <code>MAJOR</code> version</li> <li><code>MAJOR</code> version is incremented according to the project road map. Project road   map should define at which point in time or with which feature set next   <code>MAJOR</code> release is ready.</li> </ul>"},{"location":"development-process/standard-release-process/#release-candidate","title":"Release candidate","text":"<p>Depending on the need of a particular software project, a <code>pre-release</code> (<code>release candidate</code>) version may be released. The version format must follow the pre-release semver versioning scheme. Generally, we shall use the following scheme for <code>release candidates</code>:</p> <pre><code>MAJOR.MINOR.PATCH-rc.RC_ID\n</code></pre> <p>where the <code>RC_ID</code> starts with 1.</p>"},{"location":"getting-started/building/","title":"Building Zarhus OS","text":"<p>This guide will demonstrate how to build a Zarhus OS image from zero!</p>"},{"location":"getting-started/building/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux PC (tested on <code>Fedora 40</code>)</li> <li>docker installed</li> <li> <p>kas-container   4.2   script downloaded and available in   PATH.</p> <pre><code>mkdir ~/.local/bin\nwget -O ~/.local/bin/kas-container https://raw.githubusercontent.com/siemens/kas/4.2/kas-container\nchmod +x ~/.local/bin/kas-container\n</code></pre> </li> </ul> <p>Note</p> <p>You may need to add <code>~/.local/bin</code> into your PATH. You can do so for example by adding <code>export PATH=$PATH:~/.local/bin</code> to your <code>.bashrc</code> and <code>source</code> it.</p> <ul> <li> <p><code>meta-zarhus</code> repository cloned:</p> <pre><code>mkdir yocto\ncd yocto\ngit clone https://github.com/zarhus/meta-zarhus.git\n</code></pre> </li> <li> <p><code>bmaptool</code>   installed:</p> <pre><code>sudo dnf install bmap-tools\n</code></pre> </li> </ul> <p>Note</p> <p>You can also use <code>bmaptool</code> from GitHub if it is not available in your distro.</p>"},{"location":"getting-started/building/#build","title":"Build","text":"<p>Depending on which features you want to have in your build, pass the desired <code>.yml</code> files via command line. You can read more on that in kas documentation. The files should be passed in a specific order. The file which is passed after some file will override settings set by the previously-passed file.</p> <p>Currently, the following files are present in <code>meta-zarhus/kas</code>:</p> <ul> <li><code>common.yml</code>: common configuration file, should be included in all builds;</li> <li><code>cache.yml</code>: file for cache mirrors configuration;</li> <li><code>debug.yml</code>: adds debug functionalities into the final image;</li> <li><code>rockchip.yml</code>: Rockchip-specific target configuration file, should be used   for Rockchip builds;</li> <li><code>webkit.yml</code>: includes Webkit and some additional functionalities into build.</li> <li><code>rpi.yml</code>: includes a layer necessary for Raspberry Pi boards, as well   necessary config.</li> </ul> <p>Then check BSP layers for available target platform (target platforms configs are located in <code>conf/machine</code> directory of every BSP layer) and choose one. Then, from <code>yocto</code> directory run:</p> <pre><code>SHELL=/bin/bash KAS_MACHINE=&lt;TARGET_NAME&gt; kas-container build &lt;KAS_FILES&gt;\n</code></pre> <p>Note</p> <p>Replace <code>&lt;TARGET_NAME&gt;</code> with the name of the chosen target configuration file, and <code>&lt;KAS_FILES&gt;</code> with a list of kas files, separated by <code>:</code>.</p> <p>For example:</p> <pre><code>SHELL=/bin/bash KAS_MACHINE=orangepi-cm4 kas-container build meta-zarhus/kas/common.yml:meta-zarhus/kas/rockchip.yml\n</code></pre> <ul> <li>Image build takes time, so be patient and after build's finish you should see something similar to (the exact tasks numbers may differ):</li> </ul> <pre><code>Initialising tasks: 100% |###########################################################################################| Time: 0:00:01\nSstate summary: Wanted 2 Found 0 Missed 2 Current 931 (0% match, 99% complete)\nNOTE: Executing Tasks\nNOTE: Tasks Summary: Attempted 2532 tasks of which 2524 didn't need to be rerun and all succeeded.\n</code></pre>"},{"location":"getting-started/building/#verification","title":"Verification","text":"<p>The build should finish without errors or warnings.</p> <p>After the build has finished - feel free to explore <code>yocto/build/tmp/deploy/images/MACHINE_NAME/</code> directory for built images.</p> <p>Note</p> <p>Replace <code>MACHINE_NAME</code> with the name of the machine you have built your image for.</p> <p>You should find an image with filename ending with <code>.rootfs.wic.gz</code> and a binary map for the image in format with filename ending with <code>.rootfs.wic.bmap</code>. These files will be needed for flashing process.</p>"},{"location":"getting-started/flashing/","title":"Flashing Zarhus OS","text":"<p>There are many ways an OS can be flashed and booted on embedded platform, but the most common one is using an SD card. This guide will describe SD card flashing only, because all other ways to flash the image are highly target-specific and are described per-target.</p>"},{"location":"getting-started/flashing/#flashing-sd-card","title":"Flashing SD card","text":"<p>This section demonstrates how to flash a Zarhus OS image on the SD card.</p>"},{"location":"getting-started/flashing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux PC (tested on <code>Fedora 40</code>);</li> <li> <p>bmaptool   installed:</p> <pre><code>sudo apt install bmap-tools\n</code></pre> </li> <li> <p>Zarhus OS image built according to build guide.</p> </li> </ul> <p>Note</p> <p>You can also use <code>bmaptool</code> from GitHub if it is not available in your distro.</p>"},{"location":"getting-started/flashing/#flashing","title":"Flashing","text":"<p>Find out your device name:</p> <pre><code>$ lsblk\n(...)\nsdx                                             8:16   1  14.8G  0 disk\n\u251c\u2500sdx1                                          8:17   1   3.5M  0 part\n\u251c\u2500sdx2                                          8:18   1   256K  0 part\n\u251c\u2500sdx3                                          8:19   1   192K  0 part\n(...)\n</code></pre> <p>Warning</p> <p>In this case the device name is <code>/dev/sdx</code> but be aware, in next steps replace <code>/dev/sdx</code> with the right device name on your platform or else you can damage your system!</p> <p>From the directory you ran your image build, run command:</p> <pre><code>$ cd build/tmp/deploy/images/MACHINE_NAME\n$ sudo umount /dev/sdx*\n$ sudo bmaptool copy IMAGE_NAME-IMAGE_TYPE-MACHINE_NAME.rootfs.wic.gz /dev/sdx\n</code></pre> <p>Note</p> <p>Replace <code>MACHINE_NAME</code> with the name of the machine you have built the image for, <code>IMAGE_TYPE</code> with <code>debug</code> or <code>prod</code> and <code>IMAGE_NAME</code> with the name of the image you have built.</p> <p>You should see output similar to this:</p> <pre><code>bmaptool: info: block map format version 2.0\nbmaptool: info: 85971 blocks of size 4096 (335.8 MiB), mapped 42910 blocks (167.6 MiB or 49.9%)\nbmaptool: info: copying image 'zarhus-base-image-debug-radxa-cm3.rootfs.wic.gz' to block device '/dev/sdx' using bmap file 'zarhus-base-image-debug-radxa-cm3.rootfs.wic.bmap'\nbmaptool: info: 100% copied\nbmaptool: info: synchronizing '/dev/sdx'\nbmaptool: info: copying time: 11.1s, copying speed 15.1 MiB/sec\n</code></pre>"},{"location":"getting-started/flashing/#verification","title":"Verification","text":"<p>After the SD card has been flashed with your image, the partitions (at least <code>rootfs</code> partition) should be mountable. So, you can mount a partition and explore the Zarhus OS without even booting it! Here is example block storage layout after flashing Zarhus Rockchip OS image:</p> <pre><code>$ lsblk\n(...)\nsdx                                             8:16   1  14.8G  0 disk\n\u251c\u2500sdx1                                          8:17   1   3.5M  0 part\n\u251c\u2500sdx2                                          8:18   1   256K  0 part\n\u251c\u2500sdx3                                          8:19   1   192K  0 part\n\u251c\u2500sdx4                                          8:20   1    32K  0 part\n\u251c\u2500sdx5                                          8:21   1    32K  0 part\n\u251c\u2500sdx6                                          8:22   1     4M  0 part\n\u251c\u2500sdx7                                          8:23   1     4M  0 part\n\u251c\u2500sdx8                                          8:24   1     4M  0 part\n\u2514\u2500sdx9                                          8:25   1 320.7M  0 part\n(...)\n</code></pre> <p>Note</p> <p>Your SD card may get another file name in your system, here <code>sdx</code> is shown as an example.</p> <p>Mounting <code>rootfs</code>:</p> <pre><code>$ sudo mount /dev/sdx9 /mnt\n$ ls /mnt\nbin  boot  dev  etc  home  lib  lost+found  media  mnt  proc  root  run  sbin  srv  sys  tmp  usr  var\n$ lsblk\n(...)\nsdx                                             8:16   1  14.8G  0 disk\n\u251c\u2500sdx1                                          8:17   1   3.5M  0 part\n\u251c\u2500sdx2                                          8:18   1   256K  0 part\n\u251c\u2500sdx3                                          8:19   1   192K  0 part\n\u251c\u2500sdx4                                          8:20   1    32K  0 part\n\u251c\u2500sdx5                                          8:21   1    32K  0 part\n\u251c\u2500sdx6                                          8:22   1     4M  0 part\n\u251c\u2500sdx7                                          8:23   1     4M  0 part\n\u251c\u2500sdx8                                          8:24   1     4M  0 part\n\u2514\u2500sdx9                                          8:25   1 320.7M  0 part  /mnt\n(...)\n</code></pre> <p>For further image verification checkout verification guide.</p>"},{"location":"getting-started/verification/","title":"Verification","text":"<p>This document describes image verification for Embedded Linux newbies, so, if you are new or think that some Linux and Yocto concepts passed you by - feel free to proceed with reading this guide, you will find essentials here!</p> <p>Every Linux image should provide a list of basic functionalities, including, apart from booting, a list of basic packages (in case of Zarhus it is defined by Yocto Project) and a list of working basic interfaces.</p> <p>Note</p> <p>Though the following chapters present \"basic interfaces\" which Zarhus OS provides support for, some of the interfaces may not be available for your target, if so, check your target page.</p>"},{"location":"getting-started/verification/#prerequisites","title":"Prerequisites","text":"<p>There is no image verification without an image, right? So, proceed with building and flashing steps firstly.</p> <p>Hardware prerequisites:</p> <ul> <li>Power supply for your target, refer to your target   page for more information;</li> <li>Serial communication devices, refer to your target   page and check how to establish serial   communication with your target;</li> <li>A cable for Ethernet connection with your target.</li> </ul>"},{"location":"getting-started/verification/#verification_1","title":"Verification","text":"<p>The verification is an execution of a set of basic commands on the running system to prove the functionality of Zarhus OS.</p>"},{"location":"getting-started/verification/#booting-platform","title":"Booting platform","text":"<p>This is the basic functionality of all OSes. To verify this, you need to connect to the serial port of your target and start communication with your host device, check your target page on how to do so.</p> <p>Plug in target power supply after the connection has been established and check for following logs:</p> <pre><code>(...)\n\nStarting kernel ...\n\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x412fd050]\n[    0.000000] Linux version 6.6.23-yocto-standard-00118-g2d01bc1d4eea (oe-user@oe-host) (aarch64-zarhus-linux-gcc (G4\n[    0.000000] KASLR disabled due to lack of seed\n[    0.000000] Machine model: Radxa Compute Module 3(CM3) IO Board\n[    0.000000] efi: UEFI not found.\n[    0.000000] earlycon: uart0 at MMIO32 0x00000000fe660000 (options '1500000n8')\n[    0.000000] printk: bootconsole [uart0] enabled\n[    0.000000] NUMA: No NUMA configuration found\n[    0.000000] NUMA: Faking a node at [mem 0x0000000000200000-0x00000000efffffff]\n[    0.000000] NUMA: NODE_DATA [mem 0xef8239c0-0xef825fff]\n[    0.000000] Zone ranges:\n[    0.000000]   DMA      [mem 0x0000000000200000-0x00000000efffffff]\n[    0.000000]   DMA32    empty\n[    0.000000]   Normal   empty\n[    0.000000] Movable zone start for each node\n[    0.000000] Early memory node ranges\n[    0.000000]   node   0: [mem 0x0000000000200000-0x00000000efffffff]\n[    0.000000] Initmem setup node 0 [mem 0x0000000000200000-0x00000000efffffff]\n[    0.000000] On node 0, zone DMA: 512 pages in unavailable ranges\n[    0.000000] cma: Reserved 32 MiB at 0x00000000ed800000 on node -1\n[    0.000000] psci: probing for conduit method from DT.\n[    0.000000] psci: PSCIv1.1 detected in firmware.\n[    0.000000] psci: Using standard PSCI v0.2 function IDs\n\n\n(...)\n[    0.950871] systemd[1]: systemd 255.4^ running in system mode (-PAM -AUDIT -SELINUX -APPARMOR +IMA -SMACK +SECCOMP)\n[    0.953829] systemd[1]: Detected architecture arm64.\n\nWelcome to Distro for Zarhus product 0.1.0 (scarthgap)!\n\n(...)\n[  OK  ] Reached target Bluetooth Support.\n[  OK  ] Reached target Multi-User System.\n         Starting Record Runlevel Change in UTMP...\n[  OK  ] Finished Record Runlevel Change in UTMP.\n[  OK  ] Finished Virtual Console Setup.\n\nDistro for Zarhus product 0.1.0 radxa-cm3 ttyS2\n\nradxa-cm3 login:\n</code></pre> <p>Note</p> <p>Above logs are for Zarhus OS port for a Radxa board, but you should see similar logs, because these are considered to be the common Linux boot logs.</p>"},{"location":"getting-started/verification/#basic-packages","title":"Basic packages","text":"<p>There is a list with basic packages included into all Zarhus OS images for all platforms. Below are some examples how to verify version of these utilities after you have booted into Zarhus OS:</p> <pre><code># tar --version\ntar (GNU tar) 1.34\nCopyright (C) 2021 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by John Gilmore and Jay Fenlason.\n\n# time --version\ntime (GNU Time) UNKNOWN\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by David Keppel, David MacKenzie, and Assaf Gordon.\n\n# chronyc -v\nchronyc (chrony) version 4.1 (+READLINE -SECHASH +IPV6 -DEBUG)\n</code></pre>"},{"location":"getting-started/verification/#basic-operation-of-common-interfaces","title":"Basic operation of common interfaces","text":""},{"location":"getting-started/verification/#usb","title":"USB","text":"<p>Type <code>lsblk</code> command before and after plugging SSD/USB disk via USB port. You should see a new device (<code>sda</code> in this case) appears in the system:</p> <pre><code>(before plugging in)\n# lsblk\nNAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nmmcblk2      179:0    0   7.1G  0 disk\n|-mmcblk2p1  179:1    0    64M  0 part\n`-mmcblk2p2  179:2    0     6G  0 part /\nmmcblk2boot0 179:8    0    16M  1 disk\nmmcblk2boot1 179:16   0    16M  1 disk\n(after plugging in)\n# lsblk\nNAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda            8:0    0 223.6G  0 disk\n`-sda1         8:1    0 223.6G  0 part\nmmcblk2      179:0    0   7.1G  0 disk\n|-mmcblk2p1  179:1    0    64M  0 part\n`-mmcblk2p2  179:2    0     6G  0 part /\nmmcblk2boot0 179:8    0    16M  1 disk\nmmcblk2boot1 179:16   0    16M  1 disk\n</code></pre> <p>If it can be mounted (the partition on the device should have file system so to be able to be mounted), that means that the USB interface works properly:</p> <pre><code># mkdir /mnt/storage\n# mount /dev/sda1 /mnt/storage\n# lsblk\nNAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda            8:0    0 223.6G  0 disk\n`-sda1         8:1    0 223.6G  0 part /mnt/storage\nmmcblk2      179:0    0   7.1G  0 disk\n|-mmcblk2p1  179:1    0    64M  0 part\n`-mmcblk2p2  179:2    0     6G  0 part /\nmmcblk2boot0 179:8    0    16M  1 disk\nmmcblk2boot1 179:16   0    16M  1 disk\n</code></pre>"},{"location":"getting-started/verification/#ethernet","title":"Ethernet","text":"<p>After connecting the Ethernet cable to the RJ-45 port on a target platform, you should automatically gain access to the network, meaning that the device should get an IP address. Depending on your target platform, the IP address will vary because of the DHCP gateway.</p> <p>Here is a way you can check your device IP address on Zarhus OS:</p> <pre><code># ifconfig eth0\neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.0.66  netmask 255.255.255.0  broadcast 192.168.0.255\n        inet6 2a02:a312:c640:680:55b6:53d7:ff91:b44c  prefixlen 64  scopeid 0x0&lt;global&gt;\n        inet6 fe80::6210:d748:417c:1e29  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:d0:12:ab:f6:4a  txqueuelen 1000  (Ethernet)\n        RX packets 176  bytes 20962 (20.4 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 100  bytes 11279 (11.0 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p>In above logs field <code>inet</code> is followed by the device IPv4 address which, in this case, is <code>192.168.0.66</code>.</p> <p>If internet connection is available in your infrastructure, the device should be able to reach the external addresses, e.g.:</p> <pre><code># ping 8.8.8.8 -c 5\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: icmp_seq=0 ttl=109 time=24.108 ms\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=109 time=21.746 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=109 time=21.540 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=109 time=18.388 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=109 time=17.507 ms\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 packets received, 0% packet loss\nround-trip min/avg/max/stddev = 17.507/20.658/24.108/2.406 ms\n</code></pre>"},{"location":"guides/managing-layers/","title":"Managing Zarhus layers","text":"<p>This guide will describe how to add a Yocto layer into Zarhus in case you want to experiment or to build your custom Zarhus OS image.</p> <p>Warning</p> <p>This guide is recommended for advanced users, because adding or removing layers can cause build time problems as well as runtime problems which are hard to debug.</p>"},{"location":"guides/managing-layers/#currently-used-layers","title":"Currently used layers","text":"<p>Currently, we use following custom layers:</p> <ul> <li><code>meta-zarhus</code> - common across all platforms;</li> <li><code>meta-bsp-rockchip</code> - contains metadata for Rockchip target(s);</li> </ul> <p></p>"},{"location":"guides/managing-layers/#adding-new-layer","title":"Adding new layer","text":""},{"location":"guides/managing-layers/#adding-already-existing-layer","title":"Adding already existing layer","text":"<p>Most of the active and useful Yocto layers are registered in the OpenEmbedded Layer Index and it should be the first place to look for layers to use.</p> <p>Layers are added by inserting an entry to the <code>kas/common.yml</code> file. For example, this is how the <code>meta-openembedded</code> could be added:</p> <pre><code>  meta-openembedded:\n    url: https://git.openembedded.org/meta-openembedded\n    refspec: 2a5c534d2b9f01e9c0f39701fccd7fc874945b1c\n    layers:\n      meta-oe:\n      meta-networking:\n      meta-python:\n      meta-filesystems:\n</code></pre> <ul> <li>the <code>url</code> points to the repository location;</li> <li>the <code>refspec</code> is a SHA1 of git commit we want to use;</li> <li>the <code>layers</code> section is optional:<ul> <li>if it does not exist, the <code>kas</code> assumes that the root directory is a layer itself;</li> <li>if it exists, we can choose which layers from given repository should be enabled - in this example we enable <code>oe</code>, <code>networking</code>, <code>python</code> and <code>filesystem</code> layers, but the <code>meta-openembedded</code> repository has a few more available;</li> </ul> </li> </ul> <p>What is <code>kas/common.yml</code> file?</p> <p>In Zarhus Project a tool named <code>kas-container</code> is being used for building images, so the <code>meta-zarhus</code> layer contains several <code>.yml</code> files to work on. The <code>kas/common.yml</code> contains common definitions for all images being build (e.g. common layers or common <code>bitbake</code> variables).</p> <p>More details can be found in the kas user guide.</p>"},{"location":"guides/managing-layers/#creating-a-new-layer","title":"Creating a new layer","text":"<p>A layer is a directory which contains some metadata gathered in the configuration files (<code>*.conf</code>), recipes (<code>*.bb</code>) or append files (<code>*.bbappend</code>). The crucial file which defines that the given directory is a layer is the <code>conf/local.conf</code> file within that directory. The content of this file describes what kind of metadata files can be found within their layer, and what are their paths. More about the <code>Yocto Project Layer Model</code> can be found in the Yocto documentation.</p> <p>Once we create our custom layer, we can add it to the build in the same way as we are adding an already existing layer.</p>"},{"location":"guides/managing-layers/#manually","title":"Manually","text":"<ul> <li>Create a directory structure:</li> </ul> <pre><code>$ mkdir -p meta-layer-a/conf meta-layer-a/recipes-layer-a\n</code></pre> <ul> <li>Create a license file, for example use the <code>MIT</code> license:</li> </ul> <p>Adjust the copyright holder data within the file.</p> <pre><code>$ wget -O meta-layer-a/COPYING.MIT https://raw.githubusercontent.com/spdx/license-list-data/master/text/MIT.txt\n</code></pre> <ul> <li>Create a <code>layer.conf</code> file, based on <code>layer.conf</code> file from one of the   already existing layers:</li> </ul> <pre><code>$ vim meta-layer-a/conf/layer.conf\n</code></pre> <p>The typical content of <code>layer.conf</code> file:</p> <pre><code># We have a conf and classes directory, add to BBPATH\nBBPATH .= \":${LAYERDIR}\"\n\n# We have recipes-* directories, add to BBFILES\nBBFILES += \"${LAYERDIR}/recipes-*/*/*.bb \\\n            ${LAYERDIR}/recipes-*/*/*.bbappend\"\n\nBBFILE_COLLECTIONS += \"meta-layer-a\"\nBBFILE_PATTERN_meta-layer-a = \"^${LAYERDIR}/\"\nBBFILE_PRIORITY_meta-layer-a = \"6\"\n\nLAYERDEPENDS_meta-layer-a = \"core\"\nLAYERSERIES_COMPAT_meta-layer-a = \"dunfell\"\n</code></pre>"},{"location":"guides/managing-layers/#using-the-bitbake-layers-script","title":"Using the bitbake-layers script","text":"<ul> <li>Enter build container shell:</li> </ul> <pre><code>$ $ SHELL=/bin/bash kas-container shell meta-zarhus/kas-debug.yml\n</code></pre> <ul> <li>Use the <code>bitbake-layers</code> command:</li> </ul> <pre><code>(docker)$ bitbake-layers create-layer /work/meta-layer-a\n\nNOTE: Starting bitbake server...\nAdd your new layer with 'bitbake-layers add-layer /work/meta-layer-a'\n</code></pre> <ul> <li>As a result, following structure is created:</li> </ul> <pre><code>/work/meta-layer-a/\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 layer.conf\n\u251c\u2500\u2500 COPYING.MIT\n\u251c\u2500\u2500 README\n\u2514\u2500\u2500 recipes-example\n    \u2514\u2500\u2500 example\n        \u2514\u2500\u2500 example_0.1.bb\n</code></pre> <ul> <li>Now we can add our recipes specific to the <code>layer-a</code> here.</li> </ul>"},{"location":"guides/managing-packages/","title":"Managing packages in Zarhus OS","text":""},{"location":"guides/managing-packages/#description","title":"Description","text":"<p>This guide will describe how to add a package into Zarhus OS image in case you want to experiment or to build your custom Zarhus OS image.</p> <p>Warning</p> <p>This guide is recommended for advanced users, because adding or removing packages can cause build time problems as well as runtime problems which are hard to debug.</p> <p>We can have two cases here, where the theory of operation will be different. In the first one, the recipe for the package we are looking for already exists and we will simply use it. In the second one, we will need to create the recipe by ourselves.</p> <p>The assumption is that a recipe for a given package already exists in one of the publicly available meta layers.</p> <p>What is a recipe?</p> <p>A recipe is a BitBake concept. It is a file containing metadata describing how to fetch the source code for a given piece of software, and later how to configure, compile and install it. Check the BitBake user manual for more information.</p>"},{"location":"guides/managing-packages/#look-for-existing-recipe","title":"Look for existing recipe","text":"<p>Before we decide which path we need to follow, we need to know whether the recipe for given software already exists or not. The OpenEmbedded layer index can help us with that. It registers most of the layers which may be worth looking at. If we fail to find a recipe there, there is still a chance of finding one somewhere else. In such cases simply try to google it. A viable option is also to look through (or also ask on) the Yocto mailing list.</p>"},{"location":"guides/managing-packages/#search-recipe-for-the-given-software","title":"Search recipe for the given software","text":"<p>The OpenEmbedded layer index can be found here. For example we will search for <code>yosys</code> recipe. It will serve as an example of adding a new layer to the <code>kas/common.yml</code> file.</p> <p></p> <p>If there were more than one recipe available for this package, we would see a list from which one can choose the appropriate recipe.</p> <p>As we can see <code>yosys</code> is available in the <code>meta-hdl</code> layer.</p>"},{"location":"guides/managing-packages/#add-package-to-the-image-when-the-recipe-already-exists","title":"Add package to the image when the recipe already exists","text":""},{"location":"guides/managing-packages/#add-new-layer-to-kascommonyml-file","title":"Add new layer to <code>kas/common.yml</code> file","text":"<p>If the recipe is available in one of the already used layers, this step can be skipped, otherwise you will need to add an additional layer to your image.</p> <p>Some recipes are available in layers which are not used in our build yet. In such cases we need to add them to the <code>kas/common.yml</code> file. To install the <code>yosys</code> package, <code>meta-hdl</code> layer needs to be added to the <code>kas/common.yml</code> file. We need the URL of the layer repository and refspec of the commit we want to use. This information can be obtained by clicking on the layer page provided in the recipe information. There will be a link to the repository page.</p> <p></p> <p>What is <code>kas/common.yml</code> file?</p> <p>In Zarhus a tool named <code>kas-container</code> is being used for building images, so the <code>meta-zarhus</code> layer contains several <code>.yml</code> files to work on. The <code>kas/common.yml</code> contains common definitions for all images being build (e.g. common layers or common <code>bitbake</code> variables).</p> <p>From there we can open a repository website where we can find information we need. Then add those lines to <code>kas/common.yml</code> file:</p> <pre><code>meta-hdl:\n    url: https://github.com/nathanrossi/meta-hdl\n    refspec: fa82506e0964bfa36519ecaea13c6397e25c81ef\n</code></pre> <p><code>url</code> is a link to clone <code>git</code> repository and <code>refspec</code> is a <code>git</code> revision. When choosing which one to use it is best to check if the repository has branches named as Yocto releases. If it is true, we should take the top commit from the one matching the Yocto release used in <code>meta-zarhus</code>. If the repository does not provide such branches, we should use the top commit from the <code>master</code> branch.</p>"},{"location":"guides/managing-packages/#add-package-to-the-image","title":"Add package to the image","text":"<p>Basically, to add a package we need to append its name to the <code>IMAGE_INSTALL</code> variable. It can be done in multiple ways. We will describe here two ways of doing that. The second one can be considered as a better practice to follow.</p> <ul> <li> <p>Add the package name directly to the image recipe   (<code>recipes-zarhus/images/zarhus-base-image.inc</code>).</p> <ul> <li>Adding packages directly to the image recipe may turn out into maintenance issues quickly</li> </ul> <pre><code>IMAGE_INSTALL_append = \" \\\n  packagegroup-zarhus-system \\\n  yosys \\\n\"\n</code></pre> </li> <li> <p>Add the package name to one of the <code>packagegroups</code> in the <code>packagegroups</code>   recipe   (<code>recipes-zarhus/packagegroups/packagegroup-zarhus.bb</code>)</p> <ul> <li>Dividing packages in structured <code>packagegroup</code> (e.g. divided by part of the system or by a functionality) is easier to maintain in the long run</li> </ul> <pre><code>RDEPENDS_${PN}-system = \" \\\n  packagegroup-core-base-utils \\\n  chrony \\\n  chronyc \\\n  yosys \\\n\"\n</code></pre> </li> </ul>"},{"location":"guides/managing-packages/#verification","title":"Verification","text":"<p>Rebuild and reinstall (update) the system. Log into the platform and check if the package is available.</p> <pre><code># yosys -H\n\n /----------------------------------------------------------------------------\\\n |                                                                            |\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |                                                                            |\n |  Copyright (C) 2012 - 2019  Clifford Wolf &lt;clifford@clifford.at&gt;           |\n |                                                                            |\n |  Permission to use, copy, modify, and/or distribute this software for any  |\n |  purpose with or without fee is hereby granted, provided that the above    |\n |  copyright notice and this permission notice appear in all copies.         |\n |                                                                            |\n |  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |\n |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |\n |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |\n |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |\n |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |\n |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |\n |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |\n |                                                                            |\n \\----------------------------------------------------------------------------/\n</code></pre>"},{"location":"guides/managing-packages/#add-package-to-the-image-when-the-recipe-does-not-exist","title":"Add package to the image when the recipe does not exist","text":"<p>If we fail to find the recipe for the software we need (or maybe we have a custom software) we need to develop the recipe ourselves.</p> <p>This section will describe how to write a recipe to install some packages to the image. We will provide three examples:</p> <ul> <li>A recipe for our custom file (simple shell script as an example),</li> <li>A recipe for an open-source software project (Python module as an example),</li> <li>A recipe for binary components (printer drivers as an example).</li> </ul> <p>More detailed information can be found in the \"writing a new recipe\" section in Yocto Manual.</p>"},{"location":"guides/managing-packages/#a-recipe-for-our-custom-file","title":"A recipe for our custom file","text":"<p>This is quite a common scenario that we want to install some additional scripts or configuration files into the image. A simple shell script is used as an example, but it can be anything more complicated.</p> <p>The example shell script looks as follows:</p> <pre><code>$ cat file-example.sh\n#!/bin/bash\n\necho \"This is example script installed in the image.\"\n</code></pre>"},{"location":"guides/managing-packages/#create-directory-structure","title":"Create directory structure","text":"<p>Create a directory with the name of the recipe inside the layer. It can be placed in <code>recipes-example</code>, i.e.:</p> <pre><code>mkdir recipes-example/example-file\n</code></pre> <p>Inside that directory create another one, also named it <code>example-file</code>. There we can put any files which we want to use in the recipe. It has to be named like a recipe name or just <code>files</code>.</p> <pre><code>mkdir recipes-example/example-file/example-file\n</code></pre> <p>The script should be placed at <code>recipes-example/example-file/example-file/file-example.sh</code>.</p> <p>Create a recipe file. Each recipe file should be named according to this pattern: <code>PN_PV.bb</code>, where <code>PN</code> is the name of the recipe and <code>PV</code> is the version number of the recipe. For the example, it will be <code>example-file_0.1.bb</code>.</p>"},{"location":"guides/managing-packages/#create-a-recipe","title":"Create a recipe","text":"<p>Below is the content of the recipe:</p> <pre><code>SUMMARY = \"Install example script in /usr/bin.\"\n\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\"\n\nSRC_URI = \"file://file-example.sh \\\n           \"\n\nRDEPENDS_${PN} = \"bash\"\n\nS = \"${WORKDIR}\"\n\ndo_install() {\n    install -d ${D}${bindir}\n    install -m  0755 ${S}/file-example.sh ${D}${bindir}/\n}\n</code></pre> <p>In the SRC_URI variable we list files or URLs to sources which we want to use in the recipe.</p> <p>The RDEPENDS variable determines runtime dependencies which have to be installed in the image along with our package so it works correctly. In this case, we certainly need <code>bash</code> as an interpreter for our simple script.</p> <p><code>do_install()</code> section determines what will be installed in the image. <code>S</code> variable is the working directory while <code>D</code> variable means destination directory. Variable <code>bindir</code> is one of the variables defined in <code>poky/meta/conf/bitbake.conf</code> and it expands to <code>/usr/bin</code>.</p> <p>Variables like <code>libdir</code> or <code>bindir</code> should be used within the recipes, rather than hardcoded <code>/usr/bin</code> or <code>/usr/lib/</code> paths.</p> <p>Add a package to the image as already explained in the Add package to the image section.</p>"},{"location":"guides/managing-packages/#verification_1","title":"Verification","text":"<p>Rebuild and reinstall (update) the system. Log into the platform and check if the package is available.</p> <pre><code># file-example.sh\nThis is example script installed in the image.\n</code></pre>"},{"location":"guides/managing-packages/#a-recipe-for-open-source-software-project","title":"A recipe for open-source software project","text":"<p>In this example we want to add a Python module which can be found on the <code>pypi</code> website. From <code>pypi</code> we will need a URL to the source which can be found under the Download files section. Let's say that we need the <code>ipaddresses</code> module.</p> <p>Instead of creating a recipe manually like previously, we will use <code>recipetool</code> inside the <code>kas-container</code> shell this time.</p>"},{"location":"guides/managing-packages/#creating-recipe-with-recipetool","title":"Creating recipe with recipetool","text":"<p>At first, we need to obtain a URL to a source of the Python module.</p> <p>Then, run <code>kas-container</code> in shell mode. Use the same command as for building the image, but use <code>shell</code> command instead of the <code>build</code> command. For example:</p> <pre><code>$ SHELL=/bin/bash kas-container shell meta-zarhus/kas-debug.yml\n</code></pre> <p>Use <code>recipetool</code> to create the recipe. <code>recipetool</code> command syntax:</p> <pre><code>(docker)$ recipetool create -o recipeName_version.bb URLtoSource\n</code></pre> <p>For <code>recipeName</code> we should use the name of the module. We can use the <code>python-</code> prefix.</p> <p>Result of running <code>recipetool</code> to create a recipe for that Python module.</p> <pre><code>(docker)$ recipetool create -o python-ipaddresses_0.0.2.bb https://files.pythonhosted.org/packages/8c/ca/e52321c8d9b4b01db6dd73d9df65ed011bd2199e780367faf2f6a8bf0229/ipaddresses-0.0.2.zip\nNOTE: Starting bitbake server...\nINFO: Fetching https://files.pythonhosted.org/packages/8c/ca/e52321c8d9b4b01db6dd73d9df65ed011bd2199e780367faf2f6a8bf0229/ipaddresses-0.0.2.zip...\nLoading cache: 100% |########################################################################################################################################################################| Time: 0:00:00\n\n[....]\n\nInitialising tasks: 100% |###################################################################################################################################################################| Time: 0:00:00\nSstate summary: Wanted 0 Found 0 Missed 0 Current 2 (0% match, 100% complete)\nNOTE: Executing Tasks\nNOTE: Setscene tasks completed\nNOTE: Tasks Summary: Attempted 18 tasks of which 16 didn't need to be rerun and all succeeded.\nINFO: Scanning the entire source tree, as one or more of the following setup keywords are non-literal: py_modules, scripts, packages.\nINFO: Scanning paths for packages &amp; dependencies: .\nINFO: Recipe python-ipaddresses_0.0.2.bb has been created; further editing may be required to make it fully functional\n</code></pre> <p>Content of the automatically recipe:</p> <pre><code># Recipe created by recipetool\n# This is the basis of a recipe and may need further editing in order to be fully functional.\n# (Feel free to remove these comments when editing.)\n\nSUMMARY = \"Shows your private and public IP addresses.\"\nHOMEPAGE = \"https://github.com/jcrmatos/ipaddresses\"\n# WARNING: the following LICENSE and LIC_FILES_CHKSUM values are best guesses - it is\n# your responsibility to verify that the values are complete and correct.\n#\n# The following license files were not able to be identified and are\n# represented as \"Unknown\" below, you will need to check them yourself:\n#   LICENSE.rst\n#   doc/license.rst\n#   ipaddresses/LICENSE.txt\n#   ipaddresses/doc/license.html\n#   ipaddresses/doc/_sources/license.txt\nLICENSE = \"GPL-2.0+\"\nLIC_FILES_CHKSUM = \"file://LICENSE.rst;md5=24cba5e1e1bce23f7530914721f826b1 \\\n                    file://doc/license.rst;md5=414452756434e3f660368db630471155 \\\n                    file://ipaddresses/LICENSE.txt;md5=24cba5e1e1bce23f7530914721f826b1 \\\n                    file://ipaddresses/doc/license.html;md5=8e340f5da23d4699a779cfdb2371a32a \\\n                    file://ipaddresses/doc/_sources/license.txt;md5=414452756434e3f660368db630471155\"\n\nSRC_URI = \"https://files.pythonhosted.org/packages/8c/ca/e52321c8d9b4b01db6dd73d9df65ed011bd2199e780367faf2f6a8bf0229/ipaddresses-${PV}.zip\"\nSRC_URI[md5sum] = \"a4075f5ae2c874293eb0f3ab6269f9a9\"\nSRC_URI[sha256sum] = \"28b8b835aa3df01819a5e0e3af09f8bdbe01dbbc505f4b43e45d23e7f94f0e03\"\n\nS = \"${WORKDIR}/ipaddresses-${PV}\"\n\ninherit setuptools3\n\n# WARNING: the following rdepends are from setuptools install_requires. These\n# upstream names may not correspond exactly to bitbake package names.\nRDEPENDS_${PN} += \"python3-colorama python3-future\"\n\n# WARNING: the following rdepends are determined through basic analysis of the\n# python sources, and might not be 100% accurate.\nRDEPENDS_${PN} += \"python3-colorama python3-compression python3-core python3-datetime python3-future python3-io python3-json python3-pickle python3-setuptools python3-shell python3-tkinter\"\n\n# WARNING: We were unable to map the following python package/module\n# dependencies to the bitbake packages which include them:\n#    cx_Freeze\n#    py2exe\n#    sphinx\n#    ttk\n</code></pre>"},{"location":"guides/managing-packages/#move-recipe-to-zarhus-layer","title":"Move recipe to Zarhus layer","text":"<p>Create a directory with the name of the recipe inside the <code>meta-zarhus</code> layer. It can be placed in <code>recipes-example</code>, i.e.:</p> <pre><code>$ mkdir recipes-example/python-ipaddresses\n</code></pre> <p>Add the generated recipe to the directory.Then, add a package to the image as already explained in the Add package to the image section.</p>"},{"location":"guides/managing-packages/#verification_2","title":"Verification","text":"<p>Rebuild and reinstall (update) the system. Log into the platform and check if package (module) is available.</p> <pre><code># python3\nPython 3.7.5 (default, Nov 30 2019, 19:04:26)\n[GCC 9.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; help(\"ipaddresses\")\nHelp on package ipaddresses:\n\nNAME\n    ipaddresses - Package initialization file.\n\nPACKAGE CONTENTS\n    appinfo\n    cli\n    common\n    gui_tk_func\n    ipaddresses\n    localization\n    shared\n\nDATA\n    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...\n    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...\n    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...\n    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...\n\nFILE\n    /usr/lib/python3.7/site-packages/ipaddresses/__init__.py\n</code></pre>"},{"location":"guides/managing-packages/#a-recipe-for-binary-component-printer-drivers-as-an-example","title":"A recipe for binary component (printer drivers as an example)","text":"<p>In this case, we want (or need) to present how to add a recipe for a binary (pre-compiled) software component. Generally, this is not a good practice and all software components should be cross-compiled as part of the Yocto build. But sometimes there is no other way as some software is distributed in a binary form only.</p> <p>Printer drivers are often distributed this way, that is why one of them was selected as an example. With this recipe, we want to add a printer driver. We will generate a recipe manually and we will discuss problems which occurred while building it.</p>"},{"location":"guides/managing-packages/#create-directory-structure_1","title":"Create directory structure","text":"<p>Obtain URL to a source of the printer driver. The original package can be found here. Unfortunately, the directory name has <code>()</code> in it's name and BitBake fails to parse it. That is why reuploading to a cloud with a different directory name was used as a workaround.</p> <p>Create a directory with the name of the recipe inside the <code>meta-zarhus</code> layer. It can be placed in <code>recipes-extended</code>, i.e.:</p> <pre><code>$ mkdir recipes-extended/godex-cups-printer-driver\n</code></pre>"},{"location":"guides/managing-packages/#create-recipe-file","title":"Create recipe file","text":"<p>Each recipe file should be named according to this pattern: <code>PN_PV.bb</code>, where: <code>PN</code> is the name of the recipe and <code>PV</code> is the version number of the recipe. For this driver, it will be <code>godex-cups-printer-driver_1.1.4.bb</code>.</p> <p>This is the content of the recipe:</p> <pre><code>LICENSE = \"Unknown\"\n\nSRC_URI = \"https://cloud.3mdeb.com/index.php/s/irabKp2xKjPLH68/download;downloadfilename=GoDEXdriver-1.1.4.tar.gz\"\n\nLIC_FILES_CHKSUM = \"file://ChangeLog;md5=765abf1f23a5b03f83fd90c5135731b9\"\n\nSRC_URI[md5sum] = \"72e4fc543e4b3944608eefc42d63bd56\"\nSRC_URI[sha256sum] = \"8165324bb2bb595ff75f305463c8dfa61b38b7a3347fbe7ef8a208977511b3ba\"\n\nS = \"${WORKDIR}/GoDEXdriver-1.1.4\"\n\ndo_install () {\n    install -d ${D}${sysconfdir}/cups/ppd\n    for ppd in ${S}/ppd/*\n    do\n        install -m 0644 $ppd ${D}${sysconfdir}/cups/ppd/$(basename $ppd)\n    done\n\n    install -d ${D}${libexecdir}/cups/filter\n    install -m 0755 ${S}/rastertoezpl ${D}${libexecdir}/cups/filter\n}\n\nDIRFILES = \"1\"\n\nRDEPENDS_${PN} = \"cups cups-lib cups-libimage\"\n</code></pre> <p>In <code>SRC_URI</code> there is a URL to a driver with modified a name. <code>SRC_URI[md5sum]</code> and <code>SRC_URI[sha256sum]</code> are respectively the <code>md5</code> and <code>sha256</code> sum of a file from the <code>SRC_URI</code> variable.</p> <p>In the <code>do_install()</code> section we install every important file into the image.</p> <p>In <code>RDEPENDS</code> there are every cup related packages which are needed for that printer driver to work.</p> <p><code>DIRFILES = \"1\"</code> fixes build error.</p> <p>In our case there was packaging conflict between the cups and godex recipes. By setting this variable we change the way in which the directories are owned by the packages. The packaging is set to RPM and the packaging actions are defined in the <code>package_rpm.bbclass</code></p> <p>Add a package to the image. It can be done by adding the name of the created recipe to one of the packagegroup defined in <code>recipes-zarhus/packagegroups/packagegroup-zarhus.bb</code>, i.e.:</p> <pre><code>RDEPENDS_${PN}-printers = \" \\\n    cups \\\n    godex-cups-printer-driver \\\n    hplip \\\n    hplip-backend \\\n    hplip-cups \\\n    hplip-filter \\\n    hplip-ppd \\\n\"\n</code></pre> <p>Build the image.</p>"},{"location":"guides/managing-packages/#verification_3","title":"Verification","text":"<p>Check if needed postscript printer description files were installed.</p> <pre><code># ls /etc/cups/ppd/godex-*\n/etc/cups/ppd/godex-bp500l.ppd    /etc/cups/ppd/godex-ez1105.ppd   /etc/cups/ppd/godex-ez320.ppd     /etc/cups/ppd/godex-g300.ppd    /etc/cups/ppd/godex-rt200i.ppd   /etc/cups/ppd/godex-rt833i.ppd\n/etc/cups/ppd/godex-bp500ldt.ppd  /etc/cups/ppd/godex-ez120.ppd    /etc/cups/ppd/godex-ez330.ppd     /etc/cups/ppd/godex-g330.ppd    /etc/cups/ppd/godex-rt230.ppd    /etc/cups/ppd/godex-rt860i.ppd\n/etc/cups/ppd/godex-bp520l.ppd    /etc/cups/ppd/godex-ez1200p.ppd  /etc/cups/ppd/godex-ez520.ppd     /etc/cups/ppd/godex-g500.ppd    /etc/cups/ppd/godex-rt230i.ppd   /etc/cups/ppd/godex-rt863i.ppd\n/etc/cups/ppd/godex-bp520ldt.ppd  /etc/cups/ppd/godex-ez130.ppd    /etc/cups/ppd/godex-ez530.ppd     /etc/cups/ppd/godex-g530.ppd    /etc/cups/ppd/godex-rt700.ppd    /etc/cups/ppd/godex-zx1200i.ppd\n/etc/cups/ppd/godex-bp530l.ppd    /etc/cups/ppd/godex-ez1300p.ppd  /etc/cups/ppd/godex-ez6200p.ppd   /etc/cups/ppd/godex-ge300.ppd   /etc/cups/ppd/godex-rt700i.ppd   /etc/cups/ppd/godex-zx1200xi.ppd\n/etc/cups/ppd/godex-dt2.ppd   /etc/cups/ppd/godex-ez1305.ppd   /etc/cups/ppd/godex-ez6250i.ppd   /etc/cups/ppd/godex-ge330.ppd   /etc/cups/ppd/godex-rt700iw.ppd  /etc/cups/ppd/godex-zx1300i.ppd\n/etc/cups/ppd/godex-dt2x.ppd      /etc/cups/ppd/godex-ez2050.ppd   /etc/cups/ppd/godex-ez6300p.ppd   /etc/cups/ppd/godex-hd820i.ppd  /etc/cups/ppd/godex-rt700x.ppd   /etc/cups/ppd/godex-zx1300xi.ppd\n/etc/cups/ppd/godex-dt4.ppd   /etc/cups/ppd/godex-ez2150.ppd   /etc/cups/ppd/godex-ez6350i.ppd   /etc/cups/ppd/godex-hd830i.ppd  /etc/cups/ppd/godex-rt730.ppd    /etc/cups/ppd/godex-zx1600i.ppd\n/etc/cups/ppd/godex-dt4c.ppd      /etc/cups/ppd/godex-ez2200p.ppd  /etc/cups/ppd/godex-ezdt2.ppd     /etc/cups/ppd/godex-mx20.ppd    /etc/cups/ppd/godex-rt730i.ppd   /etc/cups/ppd/godex-zx420.ppd\n/etc/cups/ppd/godex-dt4l.ppd      /etc/cups/ppd/godex-ez2250i.ppd  /etc/cups/ppd/godex-ezdt4.ppd     /etc/cups/ppd/godex-mx30.ppd    /etc/cups/ppd/godex-rt730iw.ppd  /etc/cups/ppd/godex-zx420i.ppd\n/etc/cups/ppd/godex-dt4x.ppd      /etc/cups/ppd/godex-ez2300p.ppd  /etc/cups/ppd/godex-ezpi1200.ppd  /etc/cups/ppd/godex-mx30i.ppd   /etc/cups/ppd/godex-rt730x.ppd   /etc/cups/ppd/godex-zx430.ppd\n/etc/cups/ppd/godex-ez1100p.ppd   /etc/cups/ppd/godex-ez2350i.ppd  /etc/cups/ppd/godex-ezpi1300.ppd  /etc/cups/ppd/godex-rt200.ppd   /etc/cups/ppd/godex-rt823i.ppd   /etc/cups/ppd/godex-zx430i.ppd\n</code></pre>"},{"location":"guides/rpi4-crosscon-hypervisor/","title":"Zarhus OS on CROSSCON Hypervisor on RPi 4","text":"<p>This guide provides info on how to boot Zarhus OS on a Raspberry Pi 4 device running the CROSSCON Hypervisor.</p>"},{"location":"guides/rpi4-crosscon-hypervisor/#build-crosscon-hypervisor","title":"Build CROSSCON Hypervisor","text":"<p>First, follow the default demo using the docker environment to isolate the dependencies. Make sure to save the content of the prepared boot partition, so that it will not be lost, as it will be needed later.</p>"},{"location":"guides/rpi4-crosscon-hypervisor/#build-zarhus","title":"Build Zarhus","text":"<p>Zarhus OS will also have to be built (on the host). Make sure to run this exact build command:</p> <pre><code>SHELL=/bin/bash KAS_MACHINE=raspberrypi4-64 kas-container build meta-zarhus/kas/common.yml:meta-zarhus/kas/cache.yml:meta-zarhus/kas/debug.yml:meta-zarhus/kas/rpi.yml\n</code></pre> <p>Note</p> <p>The <code>KAS_MACHINE</code> variable is significant, <code>raspberrypi4</code> would build a 32-bit version of the system - <code>raspberrypi4-64</code> needs to be used in order to get a 64-bit version, so that it's compatible with the hypervisor.</p>"},{"location":"guides/rpi4-crosscon-hypervisor/#replacing-kernel","title":"Replacing kernel","text":"<p>When the Zarhus OS build finishes, flash the SD card:</p> <pre><code>cd build/tmp/deploy/images/raspberrypi4-64/\nsudo bmaptool copy --bmap zarhus-base-image-debug-raspberrypi4-64.rootfs.wic.bmap zarhus-base-image-debug-raspberrypi4-64.rootfs.wic.gz /dev/sd[X]\n</code></pre> <p>Note</p> <p>Replace <code>/dev/sd[X]</code> with the actual card.</p> <p>Once that finishes, remount the card and delete everything from the <code>/boot</code> partition, replacing it with the content produced by the CROSSCON Hypervisor demo step above.</p> <p>The kernel from the CROSSCON demo also needs to be swapped with the Zarhus OS kernel. It can be done by first copying the new kernel to the container (make sure to copy the actual kernel, not the symlink):</p> <pre><code>cd build/tmp/deploy/images/raspberrypi4-64/\ndocker cp -L Image crosscon_hv_container:/work/Image\n</code></pre> <p>Note</p> <p><code>-L</code> argument is needed to copy underlying file instead of symlink</p>"},{"location":"guides/rpi4-crosscon-hypervisor/#the-final-image","title":"The final image","text":"<p>The Hypervisor will have to be recompiled, starting from step 9 of the original demo.</p> <p>First apply this change to the device tree file in <code>rpi4-ws</code> folder (make sure this is done inside the container):</p> <pre><code>root@565810a48049:/work/crosscon/rpi4-ws# git --no-pager diff rpi4.dts\ndiff --git a/rpi4-ws/rpi4.dts b/rpi4-ws/rpi4.dts\nindex 0a690a0..3d06bbc 100644\n--- a/rpi4-ws/rpi4.dts\n+++ b/rpi4-ws/rpi4.dts\n@@ -18,7 +18,7 @@\n\n     chosen {\n         stdout-path = \"serial1:115200n8\";\n-        bootargs = \"earlycon clk_ignore_unused ip=192.168.42.15 carrier_timeout=0\";\n+        bootargs = \"8250.nr_uarts=8 root=/dev/mmcblk1p2 rw rootwait console=ttyS1,115200 earlycon clk_ignore_unused ip=192.168.42.15 carrier_timeout=0\";\n     };\n\n     reserved-memory {\n@@ -824,7 +824,7 @@\n             pinctrl-names = \"default\";\n             pinctrl-0 = &lt;0x07 0x08&gt;;\n             uart-has-rtscts;\n-            status = \"okay\";\n+            status = \"disabled\";\n\n             bluetooth {\n                 compatible = \"brcm,bcm43438-bt\";\n@@ -1402,14 +1402,14 @@\n         #address-cells = &lt;0x02&gt;;\n         #size-cells = &lt;0x01&gt;;\n         ranges = &lt;0x00 0x7e000000 0x00 0xfe000000 0x1800000&gt;;\n-        dma-ranges = &lt;0x00 0xc0000000 0x00 0x00 0x40000000&gt;;\n+        dma-ranges = &lt;0x0 0x0 0x0 0x0 0xfc000000&gt;;\n\n         emmc2@7e340000 {\n             compatible = \"brcm,bcm2711-emmc2\";\n             reg = &lt;0x00 0x7e340000 0x100&gt;;\n             interrupts = &lt;0x00 0x7e 0x04&gt;;\n             clocks = &lt;0x06 0x33&gt;;\n-            status = \"disabled\";\n+            status = \"okay\";\n             vqmmc-supply = &lt;0x1e&gt;;\n             vmmc-supply = &lt;0x1f&gt;;\n             broken-cd;\nroot@565810a48049:/work/crosscon/rpi4-ws#\n</code></pre> <p>Note</p> <p>This <code>git diff</code> was put here in order to outline the changes that need to be made to the <code>rpi4.dts</code> file. It can work as a patch to be applied, but if it doesn't apply, installing some sort of text editor on the container in order to apply the changes manually will be necessary: <pre><code>apt-get update\napt-get upgrade\napt-get install vim nano\n</code></pre></p> <p>The reasoning for these changes is as follows:</p> <ul> <li><code>8250.nr_uarts=8</code> tells the <code>8250</code> serial driver to allocate up to 8 serial ports. This is necessary, because if this line is not here, logs from OS level will not show up on the console.</li> <li><code>root=/dev/mmcblk1p2</code> tells the kernel that there is a <code>/root</code> partition at that location. By default, the CROSSCON Hypervisor doesn't have a <code>rootfs</code> or a partition for it, so this has to be added.</li> <li><code>rw</code> ensures that the <code>rootfs</code> gets mounted in <code>read-write</code> mode, rather than <code>read-only</code>.</li> <li><code>rootwait</code> tells the kernel to wait until the root device (in this case, <code>/dev/mmcblk1p2</code>) is detected and available before trying to mount it. There can be a delay when enumerating the storage device, so this stops the kernel from giving up too early.</li> <li><code>console=ttyS1,115200</code> sets the right console, this enables access to the console and logs from OS level.</li> <li>setting <code>status = \"disabled\"</code> for the Bluetooth driver, while technically not necessary, is a good practice as it can disrupt the serial console setup.</li> <li>Finally, setting the <code>dma-ranges</code> and <code>status=\"okay\"</code> for the <code>emmc2bus</code> enables the whole SD card storage device.</li> </ul> <p>Then run the following commands:</p> <pre><code>root@565810a48049:/# cd /work/crosscon\nroot@565810a48049:/work/crosscon# dtc -I dts -O dtb rpi4-ws/rpi4.dts &gt; rpi4-ws/rpi4.dtb\nroot@565810a48049:/work/crosscon# cd lloader\nroot@565810a48049:/work/crosscon/lloader# rm linux-rpi4.bin\nroot@565810a48049:/work/crosscon/lloader# rm linux-rpi4.elf\nroot@565810a48049:/work/crosscon/lloader# make  \\\n    IMAGE=/work/Image \\\n    DTB=../rpi4-ws/rpi4.dtb \\\n    TARGET=linux-rpi4.bin \\\n    CROSS_COMPILE=aarch64-none-elf- \\\n    ARCH=aarch64\n</code></pre> <p>Notice that this step has changed, so instead of using the kernel from <code>linux/build-aarch64/arch/arm64/boot/</code>, the kernel from the Yocto deploy directory is used.</p> <p>Now the CROSSCON Hypervisor is almost ready to be built - just one more change needs to be applied:</p> <pre><code>root@565810a48049:/work/crosscon/CROSSCON-Hypervisor# git diff src/arch/armv8/aborts.c\ndiff --git a/src/arch/armv8/aborts.c b/src/arch/armv8/aborts.c\nindex a7f5adc..90e1262 100644\n--- a/src/arch/armv8/aborts.c\n+++ b/src/arch/armv8/aborts.c\n@@ -43,6 +43,7 @@ void internal_abort_handler(uint64_t gprs[]) {\n\n void aborts_data_lower(uint64_t iss, uint64_t far, uint64_t il)\n {\n+    printk(\"\\x9D\");\n     if (!(iss &amp; ESR_ISS_DA_ISV_BIT) || (iss &amp; ESR_ISS_DA_FnV_BIT)) {\n         ERROR(\"no information to handle data abort (0x%x)\", far);\n     }\nroot@565810a48049:/work/crosscon/CROSSCON-Hypervisor#\n</code></pre> <p>Note</p> <p>Again, just like in the above <code>git diff</code>, a text editor might be necessary to use in order to apply this change.</p> <p>This additional <code>printk</code> keeps the UART output going, so that the console can be accessed. <code>\\x9D</code> is unprintable character and is used so it doesn't pollute serial output. It mostly works (sometimes you can see cursor changing position). Right now, according to this issue this is the only workaround.</p> <p>Now the commands needed to build the Hypervisor can be re-ran:</p> <pre><code>root@565810a48049:/# CONFIG_REPO=/work/crosscon/rpi4-ws/configs\nroot@565810a48049:/# cd /work/crosscon\n\nroot@565810a48049:/work/crosscon# make -C CROSSCON-Hypervisor/ \\\n    PLATFORM=rpi4 \\\n    CONFIG_BUILTIN=y \\\n    CONFIG_REPO=$CONFIG_REPO \\\n    CONFIG=rpi4-single-vTEE \\\n    OPTIMIZATIONS=0 \\\n        SDEES=\"sdSGX sdTZ\" \\\n    CROSS_COMPILE=aarch64-none-elf- \\\n        clean\n\nroot@565810a48049:/work/crosscon# make -C CROSSCON-Hypervisor/ \\\n    PLATFORM=rpi4 \\\n    CONFIG_BUILTIN=y \\\n    CONFIG_REPO=$CONFIG_REPO \\\n    CONFIG=rpi4-single-vTEE \\\n    OPTIMIZATIONS=0 \\\n        SDEES=\"sdSGX sdTZ\" \\\n    CROSS_COMPILE=aarch64-none-elf- \\\n        -j`nproc`\n</code></pre> <p>After executing these commands, the binary will be at the following path on the container:</p> <pre><code>root@565810a48049:/work/crosscon# realpath CROSSCON-Hypervisor/bin/rpi4/builtin-configs/rpi4-single-vTEE/crossconhyp.bin\n/work/crosscon/CROSSCON-Hypervisor/bin/rpi4/builtin-configs/rpi4-single-vTEE/crossconhyp.bin\nroot@565810a48049:/work/crosscon#\n</code></pre> <p>The second-to-last step is to copy it over to host, then onto the SD card:</p> <pre><code>docker cp crosscon_hv_container:/work/crosscon/CROSSCON-Hypervisor/bin/rpi4/builtin-configs/rpi4-single-vTEE/crossconhyp.bin .\ncp crossconhyp.bin /run/media/$USER/boot/\n</code></pre> <p>Note</p> <p>The SD card doesn't necessarily have to be mounted at <code>/run/media/$USER/boot</code>, so make sure to check where it's actually mounted by using <code>lsblk</code> and checking the location.</p> <p>And finally the second partition (the one containing the rootfs) has to be mounted. This is necessary in order to edit the <code>/etc/fstab</code> file, which tells the kernel where the <code>/boot</code> partition is.</p> <p>Once the second partition has been mounted, make sure the <code>/etc/fstab</code> file looks exactly like this (this command assumes that the second partition has been manually mounted using <code>mount</code> at <code>/mnt</code> directory):</p> <pre><code>user in ~ \u03bb cat /mnt/etc/fstab\n# stock fstab - you probably want to override this with a machine specific one\n\n/dev/root            /                    auto       defaults              1  1\nproc                 /proc                proc       defaults              0  0\ndevpts               /dev/pts             devpts     mode=0620,ptmxmode=0666,gid=5      0  0\ntmpfs                /run                 tmpfs      mode=0755,nodev,nosuid,strictatime 0  0\ntmpfs                /var/volatile        tmpfs      defaults              0  0\n\n# uncomment this if your device has a SD/MMC/Transflash slot\n#/dev/mmcblk0p1       /media/card          auto       defaults,sync,noauto  0  0\n\n/dev/mmcblk1p1  /boot   vfat    defaults    0   0\nuser in ~ \u03bb\n</code></pre> <p>By default, <code>/boot</code> is specified for <code>/dev/mmcblk0p1</code>, which works for the purpose of using Zarhus OS without the CROSSCON Hypervisor, but in this case it has to be edited to point to the correct partition, which is <code>/dev/mmcblk1p1</code></p> <p>The final setup for connections and booting is the same as in the last steps of the Hypervisor demo.</p>"},{"location":"guides/rpi4-crosscon-hypervisor/#booting","title":"Booting","text":"<p>Here are example logs from booting the whole setup:</p> <pre><code>wgrzywacz in ~ \u03bb minicom -D /dev/ttyUSB0\n\nWelcome to minicom 2.9\n\nOPTIONS: I18n\nCompiled on Jul 18 2024, 00:00:00.\nPort /dev/ttyUSB0, 18:05:11\n\nPress CTRL-A Z for help on special keys\n\n7.9 GiB\nRPI 4 Model B (0xd03115)\nCore:  209 devices, 16 uclasses, devicetree: board\nMMC:   mmcnr@7e300000: 1, mmc@7e340000: 0\nLoading Environment from FAT... Unable to read \"uboot.env\" from mmc0:1...\nIn:    serial\nOut:   serial\nErr:   serial\nNet:   eth0: ethernet@7d580000\nPCIe BRCM: link up, 5.0 Gbps x1 (SSC)\nstarting USB...\nBus xhci_pci: Register 5000420 NbrPorts 5\nStarting the controller\nUSB XHCI 1.00\nscanning bus xhci_pci for devices... 2 USB Device(s) found\n       scanning usb for storage devices... 0 Storage Device(s) found\nHit any key to stop autoboot:  0\nU-Boot&gt; fatload mmc 0 0x200000 crossconhyp.bin; go 0x200000\n28650920 bytes read in 1217 ms (22.5 MiB/s)\n## Starting application at 0x00200000 ...\n\n   _____ _____   ____   _____ _____  _____ ____  _   _\n  / ____|  __ \\ / __ \\ / ____/ ____|/ ____/ __ \\| \\ | |\n | |    | |__) | |  | | (___| (___ | |   | |  | |  \\| |\n | |    |  _  /| |  | |\\___ \\\\___ \\| |   | |  | | . ` |\n | |____| | \\ \\| |__| |____) |___) | |___| |__| | |\\  |\n  \\_____|_|  \\_\\\\____/|_____/_____/ \\_____\\____/|_| \\_|\n  _    _                             _\n | |  | |                           (_)\n | |__| |_   _ _ __    ___ _ ____   ___ ___  ___  _ __\n |  __  | | | | '_ \\ / _ \\ '__\\ \\ / / / __|/ _ \\| '__|\n | |  | | |_| | |_) |  __/ |   \\ V /| \\__ \\ (_) | |\n |_|  |_|\\__, | .__/ \\___|_|    \\_/ |_|___/\\___/|_|\n          __/ | |\n         |___/|_|\n\nCROSSCONHYP INFO: Initializing VM 1\nCROSSCONHYP INFO: VM 1 adding memory region, VA 0x10100000 size 0xf00000\nCROSSCONHYP INFO: VM 1 adding MMIO region, VA: 0xfe215000 size: 0xfe215000 mapped at 0xfe215000\nCROSSCONHYP INFO: VM 1 adding IPC for shared memory 0 at VA: 0x8000000  size: 0x200000\nCROSSCONHYP INFO: VM 1 adding memory region, VA 0x8000000 size 0x200000\nCROSSCONHYP INFO: VM 1 is sdTZ (OP-TEE)\nCROSSCONHYP INFO: Initializing VM 2\nCROSSCONHYP INFO: VM 2 adding memory region, VA 0x20000000 size 0x40000000\nCROSSCONHYP INFO: VM 2 adding MMIO region, VA: 0xfc000000 size: 0xfc000000 mapped at 0xfc000000\nCROSSCONHYP INFO: VM 2 adding MMIO region, VA: 0x600000000 size: 0x600000000 mapped at 0x600000000\nCROSSCONHYP INFO: VM 2 adding MMIO region, VA: 0x0 size: 0x0 mapped at 0x0\nCROSSCONHYP INFO: VM 2 assigning interrupt 32\n\n#####################################\n# assigning lots of interrupts here #\n#####################################\n\nCROSSCONHYP INFO: VM 2 assigning interrupt 214\nCROSSCONHYP INFO: VM 2 assigning interrupt 215\nCROSSCONHYP INFO: VM 2 adding MMIO region, VA: 0x7d580000 size: 0x7d580000 mapped at 0x7d580000\nCROSSCONHYP INFO: VM 2 assigning interrupt 0\nCROSSCONHYP INFO: VM 2 assigning interrupt 4\nCROSSCONHYP INFO: VM 2 assigning interrupt 157\nCROSSCONHYP INFO: VM 2 assigning interrupt 158\nCROSSCONHYP INFO: VM 2 adding MMIO region, VA: 0x0 size: 0x0 mapped at 0x0\nCROSSCONHYP INFO: VM 2 assigning interrupt 27\nCROSSCONHYP INFO: VM 2 adding IPC for shared memory 0 at VA: 0x8000000  size: 0x200000\nCROSSCONHYP INFO: VM 2 adding memory region, VA 0x8000000 size 0x200000\nCROSSCONHYP INFO: VM 2 is sdGPOS (normal VM)\nCROSSCONHYP INFO: VM 1 is parent of VM 2\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd083]\n[    0.000000] Linux version 6.6.22-v8 (oe-user@oe-host) (aarch64-zarhus-linux-gcc (GCC) 13.2.0, GNU ld (GNU Binutils) 2.42.0.20240216) #1 SMP PREEMPT Tue Mar 19 17:41:59 UTC 2024\n[    0.000000] KASLR disabled due to lack of seed\n[    0.000000] Machine model: Raspberry Pi 4 Model B\n[    0.000000] earlycon: bcm2835aux0 at MMIO32 0x00000000fe215040 (options '115200n8')\n\n#######################\n# kernel booting here #\n#######################\n\n[    3.458439] NET: Registered PF_INET6 protocol family\n[    3.464407] Segment Routing with IPv6\n[    3.468641] In-situ OAM (IOAM) with IPv6\n[    3.512847] systemd[1]: systemd 255.4^ running in system mode (-PAM -AUDIT -SELINUX -APPARMOR +IMA -SMACK +SECCOMP -GCRYPT -GNUTLS -OPENSSL +ACL +BLKID -CURL -ELFUTILS -FIDO2 -IDN2 -IDN)\n[    3.545778] systemd[1]: Detected architecture arm64.\n\nWelcome to Distro for Zarhus product 0.1.0 (scarthgap)!\n\n[    3.586925] systemd[1]: Hostname set to &lt;raspberrypi4-64&gt;.\n[    3.601562] systemd[1]: Initializing machine ID from random generator.\n[    3.752948] systemd-sysv-generator[80]: SysV service '/etc/init.d/tee-supplicant' lacks a native systemd unit file. ~ Automatically generating a unit file for compatibility. Please upda!\n\n#######################\n# kernel booting here #\n#######################\n\n[  OK  ] Started User Login Management.\n[  OK  ] Reached target Multi-User System.\n[    9.925333] Bluetooth: HCI socket layer initialized\n[    9.953580] Bluetooth: L2CAP socket layer initialized\n        [    9.977993] Bluetooth: SCO socket layer initialized\n Starting Record Runlevel Change in UTMP...\n[  OK  ] Finished Record Runlevel Change in UTMP.\n[   10.189851] brcmfmac: brcmf_cfg80211_set_power_mgmt: power save enabled\n[  OK  ] Finished OpenSSH Key Generation.\n\nDistro for Zarhus product 0.1.0 raspberrypi4-64 ttyS1\n\nraspberrypi4-64 login:\n[   16.227830] IPv4: martian source 255.255.255.255 from 192.168.10.1, on dev end0\n[   16.235768] ll header: 00000000: ff ff ff ff ff ff 78 9a 18 13 76 6d 08 00\nroot\nroot@raspberrypi4-64:~#\nroot@raspberrypi4-64:~#\nroot@raspberrypi4-64:~# ls\nroot@raspberrypi4-64:~#\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-bios/","title":"BIOS menu","text":""},{"location":"guides/secure-boot/secure-boot-bios/#index","title":"Index","text":""},{"location":"guides/secure-boot/secure-boot-bios/#enable-secure-boot","title":"Enable Secure Boot","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#disable-secure-boot","title":"Disable Secure Boot","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#enter-secure-boot-key-management-menu","title":"Enter Secure Boot key management menu","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#add-secure-boot-certificate","title":"Add Secure Boot Certificate","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#boot-efi-file","title":"Boot EFI file","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#remove-all-secure-boot-keys","title":"Remove all Secure Boot keys","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#check-enrolled-keys","title":"Check enrolled keys","text":"<ul> <li>Dasharo</li> <li>AMI</li> </ul>"},{"location":"guides/secure-boot/secure-boot-bios/#dasharo","title":"Dasharo","text":""},{"location":"guides/secure-boot/secure-boot-bios/#enable-secure-boot-in-dasharo","title":"Enable Secure Boot in Dasharo","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Enter <code>Device Manager</code> menu</li> <li>Enter <code>Secure Boot Configuration</code> menu</li> <li> <p>Select <code>Enable Secure Boot</code></p> <pre><code>/------------------------------------------------------------------------------\\\n|                          Secure Boot Configuration                           |\n\\------------------------------------------------------------------------------/\n\n                                                        Enable/Disable the\nCurrent Secure Boot State  Disabled                   Secure Boot feature\nEnable Secure Boot         [X]                        after platform reset\nSecure Boot Mode           &lt;Standard Mode&gt;\n</code></pre> </li> <li> <p><code>Current Secure Boot State</code> should be <code>Enabled</code> after rebooting platform</p> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#disable-secure-boot-in-dasharo","title":"Disable Secure Boot in Dasharo","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Enter <code>Device Manager</code> menu</li> <li>Enter <code>Secure Boot Configuration</code> menu</li> <li>Deselect <code>Enable Secure Boot</code></li> <li><code>Current Secure Boot State</code> should be <code>Disabled</code> after rebooting platform</li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#enter-secure-boot-key-management-menu-in-dasharo","title":"Enter Secure Boot key management menu in Dasharo","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Enter <code>Device Manager</code> menu</li> <li>Enter <code>Secure Boot Configuration</code> menu</li> <li> <p>Select <code>Secure Boot Mode</code> and choose <code>Custom Mode</code></p> <pre><code>Secure Boot Mode           &lt;Standard Mode&gt;\n\n                            /------------------\\\n                            | Standard Mode    |\n                            | Custom Mode      |\n                            \\------------------/\n</code></pre> </li> <li> <p>Enter <code>Advanced Secure Boot Keys Management</code> menu</p> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#add-secure-boot-certificate-in-dasharo","title":"Add Secure Boot Certificate in Dasharo","text":"<ol> <li>Enter Secure Boot key management menu</li> <li>Enter <code>DB Options</code> menu</li> <li>Enter <code>Enroll Signature</code> menu</li> <li>Enter <code>Enroll Signature Using File</code> menu</li> <li> <p>Choose device containing tests. It should be labeled <code>tests</code>.</p> <pre><code>/------------------------------------------------------------------------------\\\n|                                File Explorer                                 |\n\\------------------------------------------------------------------------------/\n\n&gt; tests,\n[PciRoot(0x0)/Pci(0x1F,0x2)/Sata(0x0,0xFFFF,0x0)/HD(\n1,GPT,B629C319-9A22-4D85-9026-904C0422BB9E,0x800,0x4\n000)]\n</code></pre> </li> <li> <p>Select correct file and press enter</p> <pre><code>/------------------------------------------------------------------------------\\\n|                                File Explorer                                 |\n\\------------------------------------------------------------------------------/\n\n&gt; ***NEW FILE***\n&gt; ***NEW FOLDER***\n\n&gt; &lt;SBO003.001&gt;\n&gt; &lt;SBO004.001&gt;\n&gt; &lt;SBO008.001&gt;\n&gt; &lt;SBO009.001&gt;\n&gt; &lt;SBO010.001&gt;\n&gt; &lt;SBO010.002&gt;\n&gt; &lt;SBO010.003&gt;\n&gt; &lt;SBO010.004&gt;\n&gt; &lt;SBO010.005&gt;\n&gt; &lt;SBO010.006&gt;\n&gt; &lt;SBO011.001&gt;\n                                                    v\n/------------------------------------------------------------------------------\\\n</code></pre> <pre><code>/------------------------------------------------------------------------------\\\n|                                File Explorer                                 |\n\\------------------------------------------------------------------------------/\n\n&gt; ***NEW FILE***\n&gt; ***NEW FOLDER***\n\n&gt; &lt;.&gt;\n&gt; &lt;..&gt;\ncert.der\nhello.efi\n</code></pre> </li> <li> <p>Select <code>Commit Changes and Exit</code> and press enter</p> <pre><code>/------------------------------------------------------------------------------\\\n|                              Enroll Signature                                |\n\\------------------------------------------------------------------------------/\n\n                                                        Commit Changes and\n&gt; Enroll Signature Using File                           Exit\n\ncert.der\n\nSignature GUID             _\n\n\n&gt; Commit Changes and Exit\n&gt; Discard Changes and Exit\n\n/------------------------------------------------------------------------------\\\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#boot-efi-file-in-dasharo","title":"Boot EFI file in Dasharo","text":"<ol> <li>Enter BIOS setup menu</li> <li>Enter <code>One Time Boot</code> menu</li> <li> <p>Choose boot entry you want to boot.</p> <pre><code>/------------------------------------------------------------------------------\\\n|                                One Time Boot                                 |\n\\------------------------------------------------------------------------------/\n\nSBO013.001/hello.efi                                  Device Path :\nSBO013.001/LockDown.efi                               HD(1,GPT,B629C319-9A22\nSBO011.001/hello.efi                                  -4D85-9026-904C0422BB9\nSBO010.006/hello.efi                                  E,0x800,0x4000)/SBO003\nSBO010.005/hello.efi                                  .001\\hello.efi\nSBO010.004/hello.efi\nSBO010.003/hello.efi\nSBO010.002/hello.efi\nSBO010.001/hello.efi\nSBO009.001/hello.efi\nSBO008.001/hello.efi\nSBO004.001/hello.efi\nSBO003.001/hello.efi\n                                                    v\n/------------------------------------------------------------------------------\\\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#remove-all-secure-boot-keys-in-dasharo","title":"Remove all Secure Boot keys in Dasharo","text":"<ol> <li>Enter Secure Boot key management menu</li> <li>Select <code>Erase all Secure Boot Keys</code> and press enter</li> <li> <p>Accept prompt</p> <pre><code>/---------------------------------------------------------------------\\\n|                                INFO                                 |\n|---------------------------------------------------------------------|\n|Secure Boot Keys &amp; databases will be erased and Secure Boot disabled.|\n|                            Are you sure?                            |\n|                                                                     |\n|                  [ Yes ]                    [ No ]                  |\n\\---------------------------------------------------------------------/\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#check-enrolled-keys-in-dasharo","title":"Check enrolled keys in Dasharo","text":"<ol> <li>Enter Secure Boot key management menu</li> <li>Enter <code>&lt;x&gt; Options</code> where <code>&lt;x&gt;</code> is key type you want to verify</li> <li>Select <code>Delete Signature</code>.</li> <li> <p>You should see GUIDs of enrolled keys</p> <pre><code>/------------------------------------------------------------------------------\\\n|                              Delete Signature                                |\n\\------------------------------------------------------------------------------/\n\n8BE4DF61-93CA-11D2-AA0D-00 [ ]                        PKCS7_GUID\nE098032B8C\n</code></pre> </li> <li> <p>Press <code>ESC</code> to exit</p> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#ami","title":"AMI","text":""},{"location":"guides/secure-boot/secure-boot-bios/#enable-secure-boot-in-ami","title":"Enable Secure Boot in AMI","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Go to <code>Security</code> tab</li> <li>Enter <code>Secure Boot</code> menu</li> <li> <p>Set <code>Secure Boot</code> Option to <code>Enabled</code></p> <pre><code>                    Aptio Setup - AMI\n                        Security\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  System Mode              User                     \u2502\n\u2502                                                    \u2502\n\u2502  Secure Boot              [Enabled]                \u2502\n\u2502                           Active                   \u2502\n\u2502                                                    \u2502\n\u2502  Secure Boot Mode         [Custom]                 \u2502\n\u2502\u25ba Restore Factory Keys                              \u2502\n\u2502\u25ba Reset To Setup Mode       \u250c\u2500\u2500\u2500 Secure Boot \u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502                            \u2502 Disabled           \u2502  \u2502\n\u2502\u25ba Key Management            \u2502 Enabled            \u2502  \u2502\n\u2502                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Secure Boot should be <code>Active</code> after saving changes and rebooting</p> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#disable-secure-boot-in-ami","title":"Disable Secure Boot in AMI","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Go to <code>Security</code> tab</li> <li>Enter <code>Secure Boot</code> menu</li> <li>Set <code>Secure Boot</code> Option to <code>Disabled</code></li> <li>Secure Boot should be <code>Not Active</code> after saving changes and rebooting</li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#enter-secure-boot-key-management-menu-in-ami","title":"Enter Secure Boot key management menu in AMI","text":"<ol> <li>Enter BIOS Setup Menu</li> <li>Go to <code>Security</code> tab</li> <li>Enter <code>Secure Boot</code> menu</li> <li>Make sure that <code>Secure Boot Mode</code> is set to <code>Custom</code></li> <li>Enter <code>Key Management</code> menu</li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#add-secure-boot-certificate-in-ami","title":"Add Secure Boot Certificate in AMI","text":"<p>To add DB certificate:</p> <ol> <li>Enter Secure Boot key management menu</li> <li> <p>Enter <code>Authorized Signatures (db)</code> menu</p> <pre><code>\u2502  Secure Boot variable      | Size| Keys| Key\n\u2502  Source\n\u2502\u25ba Platform Key          (PK)| 1575|    1| Factory\n\u2502\u25ba Key Exchange Keys    (KEK)| 3066|    2| Factory\n\u2502\u25ba Authorized Signatures (db)| 6133|    4| Factory\n</code></pre> </li> <li> <p>Choose <code>Append</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Authorized Signatures (db)    \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 Details                           \u2502\n\u2502 Export                            \u2502\n\u2502 Update                            \u2502\n\u2502 Append                            \u2502\n\u2502 Delete                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Choose <code>No</code> to load from external media</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Append  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                          \u2502\n\u2502 Press 'Yes' to load factory default 'db' \u2502\n\u2502         or 'No' to load it from a        \u2502\n\u2502          file on external media          \u2502\n\u2502                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        Yes                    No         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Choose filesystem containing certificate you want to enroll. In case of pendrive path should contain <code>USB</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                            Select a File system                            \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 PciRoot(0x0)/Pci(0x14,0x0)/USB(0x4,0x2)/HD(1,GPT,B629C319-9A22-4D85-9026-9 \u2502\n\u2502 PciRoot(0x0)/Pci(0x1A,0x0)/eMMC(0x0)/HD(2,GPT,8DF343A2-42D9-4198-BB66-C87A \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Select correct file</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Select File      \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 add-boot-options.sh \u25b2\u2502\n\u2502 &lt;SBO013.002&gt;        \u2588\u2502\n\u2502 &lt;SBO013.001&gt;        \u2588\u2502\n\u2502 &lt;SBO011.001&gt;        \u2588\u2502\n\u2502 &lt;SBO010.006&gt;        \u2588\u2502\n\u2502 &lt;SBO010.005&gt;        \u2588\u2502\n\u2502 &lt;SBO010.004&gt;        \u2588\u2502\n\u2502 &lt;SBO010.003&gt;        \u2588\u2502\n\u2502 &lt;SBO010.002&gt;        \u2588\u2502\n\u2502 &lt;SBO010.001&gt;        \u2588\u2502\n\u2502 &lt;SBO009.001&gt;        \u2591\u2502\n\u2502 &lt;SBO008.001&gt;        \u25bc\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Select File     \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 &lt;.&gt;                \u2502\n\u2502 &lt;..&gt;               \u2502\n\u2502 hello.efi          \u2502\n\u2502 cert.der           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Select <code>Public Key Certificate</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Input File Format     \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 Public Key Certificate   \u2502\n\u2502 Authenticated Variable   \u2502\n\u2502 EFI PE/COFF Image        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Accept default owner GUID</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Enter Certificate Owner GUID           \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502   GUID  [26DC4851-195F-4AE1-9A19-FBF883BBB35E]   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> <li> <p>Select <code>Yes</code> to enroll certificate</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Append  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                           \u2502\n\u2502  Press 'Yes' to update 'db' with content  \u2502\n\u2502               from cert.der               \u2502\n\u2502                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        Yes                    No          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> </ol> <p>If everything went ok you should see</p> <pre><code>\u250c\u2500\u2500 Append  \u2500\u2500\u2500\u2510\n\u2502              \u2502\n\u2502   Success    \u2502\n\u2502              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      Ok      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>and that number of keys changed</p> <pre><code>\u25ba Authorized Signatures (db)| 6960|    5| Mixed\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-bios/#boot-efi-file-in-ami","title":"Boot EFI file in AMI","text":"<ol> <li>Enter BIOS setup menu</li> <li>Enter <code>Save &amp; Exit</code> tab</li> <li> <p>Choose boot entry you want to boot.</p> <pre><code>\u2502  Boot Override                                    \u2588\u2502\n\u2502  ubuntu (eMMC PJ3032)                             \u2588\u2502\n\u2502  SBO003.001/hello.efi (PiKVM CD-ROM Drive 0606)   \u2591\u2502\n\u2502  SBO004.001/hello.efi (PiKVM CD-ROM Drive 0606)   \u2591\u2502\n\u2502  SBO008.001/hello.efi (PiKVM CD-ROM Drive 0606)   \u2591\u2502\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#remove-all-secure-boot-keys-in-ami","title":"Remove all Secure Boot keys in AMI","text":"<ol> <li>Enter Secure Boot Key Management menu</li> <li>Choose <code>Reset To Setup Mode</code> and choose <code>Yes</code></li> <li>In case you are asked if you want to <code>reset without saving</code> you can choose <code>No</code></li> <li> <p>After that there should be no keys enrolled</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\n\u2502  Vendor Keys              Modified                 \u2502\n\u2502                                                    \u2502\n\u2502  Factory Key Provision    [Disabled]               \u2502\n\u2502\u25ba Restore Factory Keys                              \u2502\n\u2502\u25ba Reset To Setup Mode                               \u2502\n\u2502\u25ba Enroll Efi Image                                  \u2502\n\u2502\u25ba Export Secure Boot variables                      \u2502\n\u2502                                                    \u2502\n\u2502  Secure Boot variable      | Size| Keys| Key       \u2502\n\u2502  Source                                            \u2502\n\u2502\u25ba Platform Key          (PK)|    0|    0| No Keys   \u2502\n\u2502\u25ba Key Exchange Keys    (KEK)|    0|    0| No Keys   \u2502\n\u2502\u25ba Authorized Signatures (db)|    0|    0| No Keys   \u2502\n\u2502\u25ba Forbidden  Signatures(dbx)|    0|    0| No Keys   \u2502\n\u2502\u25ba Authorized TimeStamps(dbt)|    0|    0| No Keys   \u2502\n\u2502\u25ba OsRecovery Signatures(dbr)|    0|    0| No Keys   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-bios/#check-enrolled-keys-in-ami","title":"Check enrolled keys in AMI","text":"<ol> <li>Enter Secure Boot Key Management menu</li> <li> <p>Enter correct menu depending on which key you want to check</p> <pre><code>|  Secure Boot variable      | Size| Keys| Key\n|  Source\n|&gt; Platform Key          (PK)| 1575|    1| Factory\n|&gt; Key Exchange Keys    (KEK)| 3066|    2| Factory\n|&gt; Authorized Signatures (db)| 6133|    4| Factory\n|&gt; Forbidden  Signatures(dbx)|17836|  371| Factory\n|&gt; Authorized TimeStamps(dbt)|    0|    0| No Keys\n|&gt; OsRecovery Signatures(dbr)|    0|    0| No Keys\n</code></pre> </li> <li> <p>Select <code>Details</code></p> <pre><code>/-----------------------------------\\\n|     Authorized Signatures (db)    |\n|-----------------------------------|\n| Details                           |\n| Export                            |\n| Update                            |\n| Append                            |\n| Delete                            |\n\\-----------------------------------/\n</code></pre> </li> <li> <p>You can select key if you want to see whole GUID</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Authorized Signatures (db)                         \u2502\n\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n\u2502 List| Sig.Type|Count| Size| Owner GUID  | Certificate Legend               \u2502\n\u2502    1|  X.509  |    1| 1448| 77FA9ABD-...| Microsoft UEFI CA 2023           \u2502\n\u2502    2|  X.509  |    1| 1454| 77FA9ABD-...| Windows UEFI CA 2023             \u2502\n\u2502    3|  X.509  |    1| 1556| 77FA9ABD-...| Microsoft Corporation UEFI CA 20 \u2502\n\u2502    4|  X.509  |    1| 1499| 77FA9ABD-...| Microsoft Windows Production PCA \u2502\n\u2502    5|  X.509  |    1|  783| 26DC4851-...| 3mdeb_test                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>\u250c\u2500\u2500 Owner GUID  | Certificate Legend \u2500\u2500\u2510\n\u2502                                      \u2502\n\u2502 26DC4851-195F-4AE1-9A19-FBF883BBB35E \u2502\n\u2502              3mdeb_test              \u2502\n\u2502                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-verification/","title":"Verifying Secure Boot","text":""},{"location":"guides/secure-boot/secure-boot-verification/#prerequisites","title":"Prerequisites","text":"<ul> <li>Restore BIOS to defaults.     </li> <li> <p>Attached USB drive prepared in USB drive section</p> <ul> <li>If using QEMU <code>tests.img</code> can be attached directly e.g. via adding     <code>-drive if=ide,file=tests.img</code> argument to <code>qemu</code> command</li> </ul> </li> <li> <p>Before starting tests please boot to OS on machine to be tested, mount     USB drive and run <code>add-boot-options.sh</code> script. It should add all <code>.efi</code>     files to boot options</p> </li> </ul>"},{"location":"guides/secure-boot/secure-boot-verification/#usb-drive","title":"USB drive","text":"<ol> <li>Download generate-image.sh</li> <li>Build LockDown.efi file</li> <li>Build hello.efi file</li> <li>Run <code>generate-image.sh</code> script. It'll generate <code>tests.img</code> file containing needed files and certificates</li> <li>Flash this file to USB drive</li> </ol>"},{"location":"guides/secure-boot/secure-boot-verification/#lockdownefi","title":"LockDown.efi","text":"<p>Dependencies</p> <ul> <li>kas-container</li> <li>git</li> </ul> <p>Steps</p> <ol> <li> <p>Clone and checkout tag <code>v1.2.23</code></p> <pre><code>git clone --depth 1 --branch v1.2.23 https://github.com/Dasharo/meta-dts.git\n</code></pre> </li> <li> <p>Build <code>efitools</code> recipe which will build <code>LockDown.efi</code> with sample keys</p> <pre><code>SHELL=/bin/bash kas-container shell meta-dts/kas-uefi-sb.yml -c \"bitbake efitools\"`\n</code></pre> </li> <li> <p>Copy <code>LockDown.efi</code> to directory containing <code>generate-image.sh</code> script. File should be inside <code>build/tmp/deploy/images/genericx86_64</code> directory. Sample keys and certificates used in <code>LockDown.efi</code> can be viewed in <code>build/tmp/deploy/images/genericx86_64/sample-keys/uefi_sb_keys</code></p> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-verification/#helloefi","title":"hello.efi","text":"<p>Dependencies</p> <ul> <li>Docker</li> <li>git</li> </ul> <p>Steps</p> <ol> <li> <p>Pull docker image that'll contain tools needed to build <code>hello.efi</code> https://github.com/tianocore/containers?tab=readme-ov-file#Current-Status.</p> <pre><code>docker pull ghcr.io/tianocore/containers/fedora-39-build:46802aa\n</code></pre> </li> <li> <p>Get source code for EDK2</p> <pre><code>git clone --depth 1 --recurse-submodules --shallow-submodules --branch edk2-stable202408 https://github.com/tianocore/edk2.git\n</code></pre> </li> <li> <p>Add sleep (in this case 2 seconds) to <code>HelloWorld.c</code> otherwise output will disappear too fast for human to see</p> <pre><code>cd edk2\ngit apply &lt;&lt;EOF\ndiff --git a/MdeModulePkg/Application/HelloWorld/HelloWorld.c b/MdeModulePkg/Application/HelloWorld/HelloWorld.c\nindex 9b77046e561c..ebd4ad9d6a79 100644\n--- a/MdeModulePkg/Application/HelloWorld/HelloWorld.c\n+++ b/MdeModulePkg/Application/HelloWorld/HelloWorld.c\n@@ -56,5 +56,6 @@ UefiMain (\n     }\n   }\n\n+  SystemTable-&gt;BootServices-&gt;Stall(2000000);\n   return EFI_SUCCESS;\n }\nEOF\n</code></pre> </li> <li> <p>Build <code>HelloWorld.efi</code></p> <pre><code>docker run -v $(pwd):/edk2 -w /edk2 --entrypoint bash --rm \\\n    ghcr.io/tianocore/containers/fedora-39-build:46802aa -c ' \\\n        source edksetup.sh &amp;&amp; make -C BaseTools &amp;&amp; build -a X64 -t GCC5 \\\n            -p MdeModulePkg/MdeModulePkg.dsc \\\n            -m MdeModulePkg/Application/HelloWorld/HelloWorld.inf -b RELEASE'\n</code></pre> <p>Build should complete with</p> <pre><code>(...)\n- Done -\nBuild end time: 12:51:06, Oct.04 2024\nBuild total time: 00:00:06\n</code></pre> </li> <li> <p>Copy built <code>HelloWorld.efi</code> file to directory with <code>generate-image.sh</code> and rename it to <code>hello.efi</code></p> <pre><code>cp Build/MdeModule/RELEASE_GCC5/X64/HelloWorld.efi &lt;replace/this/path/&gt;hello.efi\n</code></pre> </li> </ol>"},{"location":"guides/secure-boot/secure-boot-verification/#usb-directory-layout","title":"USB directory layout","text":"<pre><code>.\n\u251c\u2500\u2500 add-boot-options.sh\n\u251c\u2500\u2500 SBO003.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO004.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO008.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO009.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.002\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.003\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.004\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.005\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO010.006\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO011.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cert.der\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.efi\n\u251c\u2500\u2500 SBO013.001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello.efi\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 LockDown.efi\n\u2514\u2500\u2500 SBO013.002\n    \u2514\u2500\u2500 KEK.crt\n\n14 directories, 26 files\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#tests","title":"Tests","text":"<p>On ODROID-H4, BIOS version ADLN-H4 1.05 there is a weird quirk in when you can edit SB settings (e.g. state, adding certificates or restoring to default). It's described in more details on ODROID forum. Due to that you should reboot platform before each test.</p>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo002001-secure-boot-can-be-enabled-from-boot-menu-and-is-seen-from-os","title":"SBO002.001 Secure Boot can be enabled from boot menu and is seen from OS","text":"<p>Description</p> <p>This test verifies that Secure Boot can be enabled from the boot menu and, after the platform reset, it is seen from the OS.</p> <p>Steps</p> <ol> <li>Enable Secure Boot</li> <li>Save changes and reboot platform</li> <li>Boot and log into OS</li> <li> <p>Enter the following command and note the output</p> <pre><code>dmesg | grep \"Secure boot\"\n</code></pre> </li> </ol> <p>Expected result:</p> <pre><code>secureboot: Secure boot enabled\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo003001-attempt-to-boot-file-signed-with-the-correct-key","title":"SBO003.001 Attempt to boot file signed with the correct key","text":"<p>Description</p> <p>This test verifies that Secure Boot allows booting a signed file with a correct key.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO003.001/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO003.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo004001-attempt-to-boot-unsigned-file","title":"SBO004.001 Attempt to boot unsigned file","text":"<p>Description</p> <p>This test verifies that Secure Boot blocks booting unsigned file.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Boot SBO004.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Booting file should fail with Secure Boot error e.g.:</p> <pre><code>/---------- Secure Boot Violation ----------\\\n|                                           |\n| Invalid signature detected. Check Secure  |\n|           Boot Policy in Setup            |\n|                                           |\n|-------------------------------------------|\n|                    Ok                     |\n\\-------------------------------------------/\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo006001-reset-secure-boot-keys-option-availability","title":"SBO006.001 Reset Secure Boot Keys option availability","text":"<p>Description</p> <p>This test aims to verify, that the Reset Secure Boot Keys option is available</p> <p>Prerequisites</p> <p>Steps</p> <ol> <li>Enter Secure Boot key management menu</li> </ol> <p>Expected result</p> <p>Option to restore SB keys should be available e.g.</p> <pre><code>Restore Factory Keys\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo007001-attempt-to-boot-the-file-after-restoring-keys-to-default","title":"SBO007.001 Attempt to boot the file after restoring keys to default","text":"<p>Description</p> <p>This test verifies that the Reset Secure Boot Keys option works correctly.</p> <p>Prerequisites</p> <ul> <li>SBO003.001     succeeded</li> <li>SBO006.001     succeeded</li> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Enter Secure Boot key management menu</li> <li>Select option to restore Secure Boot keys e.g. <code>Restore Factory Keys</code> and accept</li> <li>Save changes and reboot platform</li> <li>Boot SBO003.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Booting file should fail with Secure Boot error e.g.:</p> <pre><code>/---------- Secure Boot Violation ----------\\\n|                                           |\n| Invalid signature detected. Check Secure  |\n|           Boot Policy in Setup            |\n|                                           |\n|-------------------------------------------|\n|                    Ok                     |\n\\-------------------------------------------/\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo008001-attempt-to-enroll-the-key-in-the-incorrect-format","title":"SBO008.001 Attempt to enroll the key in the incorrect format","text":"<p>Description</p> <p>This test verifies that Secure Boot doesn't allow enrolling keys in the incorrect format</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO008.001/cert.der to DB</li> </ol> <p>Expected result</p> <p>Adding certificate should end in failure e.g.</p> <pre><code>\u250c\u2500\u2500 Append  \u2500\u2500\u2500\u2510\n\u2502              \u2502\n\u2502    Failed    \u2502\n\u2502              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      Ok      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo009001-attempt-to-boot-file-signed-for-intermediate-certificate","title":"SBO009.001 Attempt to boot file signed for intermediate certificate","text":"<p>Description</p> <p>This test verifies that a file signed with an intermediate certificate can be executed.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO009.001/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO009.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010001-check-support-for-rsa2k-signed-certificates","title":"SBO010.001 Check support for rsa2k signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports RSA2048 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.001/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010002-check-support-for-rsa3k-signed-certificates","title":"SBO010.002 Check support for rsa3k signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports RSA3072 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.002/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.002/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010003-check-support-for-rsa4k-signed-certificates","title":"SBO010.003 Check support for rsa4k signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports RSA4096 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.003/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.003/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010004-check-support-for-ecdsa256-signed-certificates","title":"SBO010.004 Check support for ecdsa256 signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports ESCDA256 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.004/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.004/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010005-check-support-for-ecdsa384-signed-certificates","title":"SBO010.005 Check support for ecdsa384 signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports ESCDA384 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.005/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.005/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo010006-check-support-for-ecdsa521-signed-certificates","title":"SBO010.006 Check support for ecdsa521 signed certificates","text":"<p>Description</p> <p>This test verifies that a Secure Boot supports ESCDA521 signed certificate and can boot file signed with this certificate.</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO010.006/cert.der to DB</li> <li>Save changes and reboot platform</li> <li>Boot SBO010.006/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo011001-attempt-to-enroll-expired-certificate-and-boot-signed-image","title":"SBO011.001 Attempt to enroll expired certificate and boot signed image","text":"<p>Description</p> <p>This test verifies that an expired certificate cannot be used to boot image</p> <p>Prerequisites</p> <ul> <li>Enabled Secure Boot</li> </ul> <p>Steps</p> <ol> <li>Add SBO011.001/cert.der to DB</li> <li>Save changes and reboot</li> <li>Boot SBO011.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Booting file should fail with Secure Boot error e.g.:</p> <pre><code>/---------- Secure Boot Violation ----------\\\n|                                           |\n| Invalid signature detected. Check Secure  |\n|           Boot Policy in Setup            |\n|                                           |\n|-------------------------------------------|\n|                    Ok                     |\n\\-------------------------------------------/\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo014001-enroll-certificates-using-sbctl","title":"SBO014.001 Enroll certificates using sbctl","text":"<p>Description</p> <p>This test erases Secure Boot keys from the BIOS menu and verifies if new keys can be enrolled from the operating system using sbctl.</p> <p>Prerequisites</p> <p>Steps</p> <ol> <li>Disable Secure Boot</li> <li>If applicable disable key provisioning (e.g. AMI BIOS)</li> <li>Remove Secure Boot keys</li> <li>Save changes and restart platform</li> <li>Boot and log into OS</li> <li> <p>Remove old Secure Boot keys</p> <pre><code>rm -rf /usr/share/secureboot\n</code></pre> </li> <li> <p>Generate new Secure Boot keys</p> <pre><code>$ sbctl create-keys\nCreated Owner UUID 2a602183-aee8-4998-a313-25635405d554\nCreating secure boot keys...\u2713\nSecure boot keys created!\n</code></pre> </li> <li> <p>Enroll generated Secure Boot keys</p> <pre><code>$ sbctl enroll-keys --yes-this-might-brick-my-machine\nEnrolling keys to EFI variables...\u2713\nEnrolled keys to the EFI variables!\n</code></pre> </li> <li> <p>Reboot platform</p> </li> <li>Enter Secure Boot key management menu</li> <li>Check enrolled KEK GUID</li> <li>Check enrolled DB GUID</li> </ol> <p>Expected result</p> <p>KEK and DB keys should have the same GUID as returned by <code>sbctl create-keys</code> command e.g. <code>2a602183-aee8-4998-a313-25635405d554</code></p>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo012001-boot-os-signed-and-enrolled-from-inside-system","title":"SBO012.001 Boot OS Signed And Enrolled From Inside System","text":"<p>Description</p> <p>This test verifies that OS boots after enrolling keys and signing system from inside OS.</p> <p>Prerequisites</p> <ul> <li>SBO014.001 succeeded</li> </ul> <p>Steps</p> <ol> <li>Boot and log into OS</li> <li> <p>Sign all components</p> <pre><code>$ sbctl verify | awk -F ' ' '{print $2}' | tail -n+2 | xargs -I @ sbctl sign \"@\"\n\u2713 Signed /boot/efi/EFI/BOOT/BOOTX64.EFI\n\u2713 Signed /boot/efi/EFI/BOOT/fbx64.efi\n\u2713 Signed /boot/efi/EFI/BOOT/mmx64.efi\n\u2713 Signed /boot/efi/EFI/ubuntu/grubx64.efi\n\u2713 Signed /boot/efi/EFI/ubuntu/mmx64.efi\n\u2713 Signed /boot/efi/EFI/ubuntu/shimx64.efi\n</code></pre> </li> <li> <p>Reboot platform</p> </li> <li>Enable Secure Boot</li> <li>Save changes and restart platform</li> <li>Boot and log into OS</li> <li> <p>Verify that Secure Boot is enabled</p> <pre><code>dmesg | grep \"Secure boot\"\n</code></pre> </li> </ol> <p>Expected result</p> <pre><code>secureboot: Secure boot enabled\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo015001-attempt-to-enroll-the-key-in-the-incorrect-format-with-sbctl","title":"SBO015.001 Attempt to enroll the key in the incorrect format with sbctl","text":"<p>Description</p> <p>This test verifies that it is impossible to load a certificate in the wrong file format from the operating system while using sbctl.</p> <p>Prerequisites</p> <p>Steps</p> <ol> <li>Disable Secure Boot</li> <li>If applicable disable key provisioning (e.g. AMI BIOS)</li> <li>Remove Secure Boot keys</li> <li>Save changes and restart platform</li> <li>Boot and log into OS</li> <li> <p>Remove old Secure Boot keys</p> <pre><code>rm -rf /usr/share/secureboot\n</code></pre> </li> <li> <p>Generate new Secure Boot keys</p> <pre><code>$ sbctl create-keys\nCreated Owner UUID 2a602183-aee8-4998-a313-25635405d554\nCreating secure boot keys...\u2713\nSecure boot keys created!\n</code></pre> </li> <li> <p>Generate keys with wrong format and move them to correct location</p> <pre><code>openssl ecparam -genkey -name secp384r1 -out db.key &amp;&amp; openssl req -new -x509 -key db.key -out db.pem -days 365 -subj \"/CN=test\"\nopenssl ecparam -genkey -name secp384r1 -out PK.key &amp;&amp; openssl req -new -x509 -key PK.key -out PK.pem -days 365 -subj \"/CN=test\"\nopenssl ecparam -genkey -name secp384r1 -out KEK.key &amp;&amp; openssl req -new -x509 -key KEK.key -out KEK.pem -days 365 -subj \"/CN=test\"\nmv db.key /usr/share/secureboot/keys/db/\nmv PK.key /usr/share/secureboot/keys/PK/\nmv KEK.key /usr/share/secureboot/keys/KEK/\n</code></pre> </li> <li> <p>Enroll generated Secure Boot keys</p> <pre><code>$ sbctl enroll-keys --yes-this-might-brick-my-machine\n</code></pre> </li> </ol> <p>Expected result</p> <p><code>sbctl</code> should fail to enroll keys</p> <pre><code>couldn't sync keys\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo013001-check-automatic-certificate-provisioning","title":"SBO013.001 Check automatic certificate provisioning","text":"<p>Description</p> <p>This test verifies that the automatic certificate provisioning will install custom keys which will allow booting signed <code>hello.efi</code> file</p> <p>Prerequisites</p> <p>Steps</p> <ol> <li>Disable Secure Boot</li> <li>If applicable disable key provisioning (e.g. AMI BIOS)</li> <li>Remove Secure Boot keys</li> <li>Save changes and restart platform</li> <li>Boot SBO013.001/LockDown.efi file</li> <li>Wait until platform reboots automatically</li> <li>Enable Secure Boot</li> <li>Save changes and restart</li> <li>Boot SBO013.001/hello.efi file</li> </ol> <p>Expected result</p> <p>Screen should show:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"guides/secure-boot/secure-boot-verification/#sbo013002-check-automatic-certificate-provisioning-kek-certificate","title":"SBO013.002 Check automatic certificate provisioning KEK certificate","text":"<p>Description</p> <p>This test verifies that automatic certificate provisioning installed expected KEK certificate</p> <p>Prerequisites</p> <ul> <li>SBO013.001 succeeded</li> </ul> <p>Steps</p> <ol> <li>Disable Secure Boot</li> <li>Save changes and restart platform.</li> <li>Boot and log into OS</li> <li>Mount USB drive with tests if it wasn't mounted automatically</li> <li> <p>Export currently enrolled certificate</p> <pre><code>mokutil --kek &gt; current_certificate.crt\n</code></pre> </li> <li> <p>Compare current KEK certificate with one that should be enrolled. Replace <code>&lt;usb/mount&gt;</code> with path to where USB drive is mounted.</p> <pre><code>diff &lt;usb/mount&gt;/SBO013.002/KEK.crt current_certificate.crt --color=always\n</code></pre> </li> </ol> <p>Expected result</p> <p>No output or slight format differences e.g.</p> <pre><code>1c1,2\n&lt; SHA1 Fingerprint=EA:EF:F4:8A:C2:38:CB:31:98:FD:45:81:6D:64:99:78:61:BB:B7:0C\n---\n&gt; [key 1]\n&gt; SHA1 Fingerprint: ea:ef:f4:8a:c2:38:cb:31:98:fd:45:81:6d:64:99:78:61:bb:b7:0c\n8c9\n&lt;         Issuer: CN = KEK Certificate\n---\n&gt;         Issuer: CN=KEK Certificate\n12c13\n&lt;         Subject: CN = KEK Certificate\n---\n&gt;         Subject: CN=KEK Certificate\n</code></pre>"},{"location":"supported-targets/quartz64-a/","title":"Quartz64 Model A","text":""},{"location":"supported-targets/quartz64-a/#description-and-resources","title":"Description and resources","text":"<p>The Quartz64 Model A is a SBC based on Rockchip RK3566 and produced by PINE64.</p> <p>Additional resources for the board:</p> <ul> <li>PINE64 documentation;</li> <li>PINE64 Wiki</li> <li>Rockchip Wiki: partitions map;</li> <li>Rockchip Wiki: boot flow.</li> </ul>"},{"location":"supported-targets/quartz64-a/#serial-port-access-zarhus-os-debug-console","title":"Serial port access (Zarhus OS debug console)","text":"<p>Numerous types of software can be used to communicate via serial ports. On a host machine with Linux-based OS it can be <code>minicom</code>, Windows users can access that with PuTTY.</p> <p>There are only two parameters that depend not only on hardware but on software as well: baudrate and serial port number. In case of Quartz64 Model A port - Zarhus OS gives access to console via serial port 2 with baudrate <code>1.5 Mbps</code>, so you can connect to the console by connecting the UART adapter to pins <code>8</code>, <code>10</code> and <code>10</code> of <code>CON40</code></p> <p>And use following command on your host Linux distribution:</p> <pre><code>$ minicom -b 1500000 -D /dev/ttyUSBX\n</code></pre> <p>Where instead of <code>/dev/ttyUSBX</code> there should be the name of your UART adapter under your host Linux distribution.</p>"},{"location":"supported-targets/quartz64-a/#zarhus-os-image-building-and-flashing","title":"Zarhus OS image building and flashing","text":"<p>For building steps check the generic Zarhus OS building guide.</p> <p>For flashing steps check the generic Zarhus OS SD card flashing guide.</p> <p>You can verify the booted image by following generic Zarhus OS image verification.</p>"},{"location":"supported-targets/radxa-cm3/","title":"Radxa CM3","text":""},{"location":"supported-targets/radxa-cm3/#description-and-resources","title":"Description and resources","text":"<p>The CM3 is a System on Module based on Rockchip RK3566 and produced by Radxa. Its developing potential can be revealed in connection with CM3 IO board.</p> <p>Additional resources for the boards:</p> <ul> <li><code>radxa/radxa-cm-projects</code>;</li> <li>CM3 design resources;</li> <li>Rockchip Wiki: partitions map;</li> <li>Rockchip Wiki: boot flow.</li> </ul>"},{"location":"supported-targets/radxa-cm3/#serial-port-access-zarhus-os-debug-console","title":"Serial port access (Zarhus OS debug console)","text":"<p>Numerous types of software can be used to communicate via serial ports. On a host machine with Linux-based OS it can be <code>minicom</code>, Windows users can access that with PuTTY.</p> <p>There are only two parameters that depend not only on hardware but on software as well: baudrate and serial port number. In case of Radxa CM3 port - Zarhus OS gives access to console via serial port 2 with baudrate <code>1.5 Mbps</code>, so you can connect to the console by connecting the UART adapter to pins <code>6</code>, <code>8</code> and <code>10</code> of <code>CON1</code> on Radxa CM3 IO board:</p> <p></p> <p>And use following command on your host Linux distribution:</p> <pre><code>$ minicom -b 1500000 -D /dev/ttyUSBX\n</code></pre> <p>Where instead of <code>/dev/ttyUSBX</code> there should be the name of your UART adapter under your host Linux distribution.</p>"},{"location":"supported-targets/radxa-cm3/#emmc-flashing","title":"eMMC Flashing","text":"<p>This guide presents the workflow of flashing a Zarhus OS image on Radxa CM3 eMMC memory.</p>"},{"location":"supported-targets/radxa-cm3/#hardware-overview","title":"Hardware overview","text":"<p>List of hardware elements used in the workflow:</p> <ul> <li>Target: Radxa Compute Module 3 with Radxa CM3 IO Board</li> <li>Power supply: 12V/2A</li> <li>Cable: Male USB A to male USB Micro B</li> </ul>"},{"location":"supported-targets/radxa-cm3/#software-overview","title":"Software overview","text":"<p>The Zarhus OS image from release <code>0.1</code> is being used during the workflow steps presented below. The image can be built from here. Check out the building guide for details about Zarhus OS building process.</p> <p>A Rockchip-specific tool, <code>rkdeveloptool</code>, will be used during the flashing step. The source code from which the tool will be built can be found here.</p>"},{"location":"supported-targets/radxa-cm3/#preparing-tools","title":"Preparing tools","text":"<p>A tool <code>rkdeveloptool</code> should be built and installed before proceeding with the workflow. Follow the below steps to complete installation:</p> <p>Install dependencies:</p> <pre><code>sudo dnf install systemd-devel libusb1-devel autoconf libusb1 pkgconf-pkg-config\nsudo dnf group install \"C Development Tools and Libraries\" \"Development Tools\"\n</code></pre> <p>Note</p> <p>On Ubuntu, you should have installed: <code>libudev-dev</code>, <code>libusb-1.0-0-dev</code>, <code>dh-autoreconf</code>, <code>pkg-config</code>, <code>lib-usb-1.0</code>, <code>build-essential</code>, <code>git</code>, and <code>wget</code>. The group <code>C Development Tools and Libraries\" \"Development Tools</code> installed above is a replacement for Ubuntu <code>build-essential</code> package, and <code>libudev</code> files are a part of <code>systemd-devel</code>.</p> <p>Fetch the tool from its repository:</p> <pre><code>git clone https://github.com/radxa/rkdeveloptool\ncd rkdeveloptool\n</code></pre> <p>Checkout version <code>1.32</code>:</p> <pre><code>git checkout ac50fcb73a63af566ea728464e376131b9384948\n</code></pre> <p>Configure build:</p> <pre><code>autoreconf -i\n./configure\n</code></pre> <p>Build:</p> <pre><code>make\n</code></pre> <p>Install:</p> <pre><code>sudo cp rkdeveloptool /usr/local/bin/\nsudo ldconfig\n</code></pre> <p>Verify the version of the installed tool (it should be <code>1.32</code>):</p> <pre><code>rkdeveloptool -v\n</code></pre>"},{"location":"supported-targets/radxa-cm3/#preparing-zarhus-os-image","title":"Preparing Zarhus OS image","text":"<p>Build the Zarhus OS image version <code>0.1</code> according to the building guide.</p> <p>After the image has been built - locate and copy the image to a known location:</p> <pre><code>cp build/tmp/deploy/images/radxa-cm3/zarhus-base-image-IMAGE_VER-radxa-cm3.rootfs.wic.gz ./\n</code></pre> <p>Note</p> <p>Replace <code>IMAGE_VER</code> with either <code>debug</code> or <code>prod</code> depending on the <code>.yml</code> file you used in previous step.</p> <p>Decompress the image (<code>rkdeveloptool</code> needs decompressed image):</p> <pre><code>gunzip zarhus-base-image-IMAGE_VER-radxa-cm3.rootfs.wic.gz\n</code></pre> <p>Note</p> <p>Replace <code>IMAGE_VER</code> with either <code>debug</code> or <code>prod</code> depending on the <code>.yml</code> file you used in previous step.</p> <p>Now you should have decompressed image file in your directory:</p> <pre><code>file ./zarhus-base-image-IMAGE_VER-radxa-cm3.rootfs.wic\nzarhus-base-image-IMAGE_VER-radxa-cm3.rootfs.wic: DOS/MBR boot sector; partition 1 : ID=0xee, start-CHS (0x0,0,2), end-CHS (0x3ff,255,63), startsector 1, 687763 sectors, extended partition table (last)\n</code></pre> <p>Note</p> <p>Replace <code>IMAGE_VER</code> with either <code>debug</code> or <code>prod</code> depending on the <code>.yml</code> file you used in previous step.</p>"},{"location":"supported-targets/radxa-cm3/#flashing","title":"Flashing","text":"<p>The <code>rkdeveloptool</code> installed in the Preparing tools chapter will be used for flashing the Zarhus OS image on the platform. Prepare the platform for eMMC flashing:</p> <p>Plug out power and eject SD card from the platform, then connect USB Micro B to the board USB OTG interface:</p> <p></p> <p>Then, connect USB A to host PC port. Press and hold SoM maskrom button showed on the image below:</p> <p></p> <p>Connect the power supply to the board and release the maskrom button.</p> <p>After the board has been powered on, confirm, that the platform has been detected by the host PC:</p> <pre><code>lsusb | grep '350a'\nBus 003 Device 007: ID 2207:350a Fuzhou Rockchip Electronics Company\n</code></pre> <p>Confirm, that the platform is in maskrom state (repeat above steps if not):</p> <pre><code>rkdeveloptool ld\nDevNo=1 Vid=0x2207,Pid=0x350a,LocationID=303    Maskrom\n</code></pre> <p>Now the platform is ready for flashing. Initialize SoC before flashing eMMC:</p> <pre><code>wget https://dl.radxa.com/rock3/images/loader/radxa-cm3-io/rk356x_spl_loader_ddr1056_v1.10.111.bin\nrkdeveloptool db rk356x_spl_loader_ddr1056_v1.10.111.bin\nDownloading bootloader succeeded.\n</code></pre> <p>Note</p> <p>The <code>rkdeveloptool</code> might need <code>root</code> rights to open <code>com</code> ports, precede the command with <code>sudo</code> and provide <code>root</code> password if it is necessary for your host OS.</p> <p>Flash eMMC:</p> <pre><code>rkdeveloptool wl 0x0 zarhus-base-image-IMAGE_VER-radxa-cm3.rootfs.wic\nWrite LBA from file (100%)\n</code></pre> <p>Note</p> <p>The <code>rkdeveloptool</code> might need <code>root</code> rights to open <code>com</code> ports, precede the command with <code>sudo</code> and provide <code>root</code> password if it is necessary for your host OS. Replace <code>IMAGE_VER</code> with either <code>debug</code> or <code>prod</code> depending on the <code>.yml</code> file you used in previous steps.</p> <p>Reset the platform:</p> <pre><code>rkdeveloptool rd\nReset Device OK.\n</code></pre> <p>Note</p> <p>The <code>rkdeveloptool</code> might need <code>root</code> rights to open <code>com</code> ports, precede the command with <code>sudo</code> and provide <code>root</code> password if it is necessary for your host OS.</p> <p>From now the eMMC has been flashed, you can unplug the USB cable and verify if the OS is working properly on the platform.</p>"},{"location":"supported-targets/rpi4/","title":"Raspberry Pi 4","text":""},{"location":"supported-targets/rpi4/#description-and-resources","title":"Description and Resources","text":"<p>The Raspberry Pi 4 is a versatile single-board computer suitable for a wide range of applications. This guide walks through building Zarhus OS using <code>meta-zarhus</code>, flashing the OS onto an SD card, and accessing the device via UART for debugging.</p> <p>Additional resources for the Raspberry Pi 4:</p> <ul> <li>Raspberry Pi Documentation</li> <li>Raspberry Pi GPIO Pinout</li> </ul>"},{"location":"supported-targets/rpi4/#zarhus-os-setup","title":"Zarhus OS Setup","text":""},{"location":"supported-targets/rpi4/#build-zarhus-os","title":"Build Zarhus OS","text":"<ol> <li> <p>Clone the <code>meta-zarhus</code> repository:</p> <pre><code>git clone https://github.com/zarhus/meta-zarhus\n</code></pre> </li> <li> <p>Follow the instructions in the repository's building guide to build Zarhus OS for Raspberry Pi 4.</p> </li> </ol> <p>Once built, you can move onto flashing.</p>"},{"location":"supported-targets/rpi4/#flash-zarhus-os-image-to-sd-card","title":"Flash Zarhus OS Image to SD Card","text":"<p>To flash the image to the SD card:</p> <pre><code>```sh\ncd build/tmp/deploy/images/raspberrypi4\nsudo bmaptool copy --bmap zarhus-base-image-debug-raspberrypi4.rootfs.wic.bmap zarhus-base-image-debug-raspberrypi4.rootfs.wic.gz /dev/sdc\n```\n</code></pre> <p>Replace <code>/dev/sdX</code> with your SD card device (e.g. <code>/dev/sdb</code>). Ensure you are writing to the correct device.</p>"},{"location":"supported-targets/rpi4/#uart-console-access","title":"UART Console Access","text":""},{"location":"supported-targets/rpi4/#hardware-setup","title":"Hardware Setup","text":"<p>To connect via UART for debugging:</p> <ol> <li> <p>Use a UART-to-USB adapter and connect it to the Raspberry Pi 4 GPIO pins:</p> GPIO Pin Description Pin 6 GND Pin 8 UART TXD Pin 10 UART RXD <p>Refer to the Raspberry Pi GPIO Pinout for the full pinout.</p> </li> <li> <p>Plug the USB end into your host machine.</p> </li> </ol>"},{"location":"supported-targets/rpi4/#software-setup","title":"Software Setup","text":"<ol> <li> <p>Install a terminal program (e.g., <code>minicom</code> for Linux).</p> </li> <li> <p>Launch <code>minicom</code> on a Linux host to connect to the RPi4:</p> <pre><code>minicom -D /dev/ttyUSBX\n</code></pre> <p>Also make sure <code>Hardware Flow Control</code> is off (<code>CTRL-A</code>, then <code>Z</code> to open the menu, then <code>O</code> to <code>Configure minicom</code>, then choose <code>Serial port setup</code>, then (if it's enabled) press <code>F</code> to disable <code>Hardware Flow Control</code>).</p> </li> <li> <p>You should now see the Zarhus OS boot console.</p> </li> </ol> <p>From this point, you can login (login <code>root</code>) to monitor and debug the Raspberry Pi 4 running Zarhus OS.</p>"},{"location":"supported-targets/targets/","title":"Supported targets","text":"<p>This section contains a list of supported vendors and their targets.</p>"},{"location":"supported-targets/targets/#radxa","title":"Radxa","text":"<ul> <li>Radxa CM3 System on Module.</li> </ul>"},{"location":"supported-targets/targets/#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>Raspberry Pi 4</li> </ul>"},{"location":"supported-targets/targets/#pine64","title":"PINE64","text":"<ul> <li>Quartz64 Model A SBC</li> </ul>"}]}